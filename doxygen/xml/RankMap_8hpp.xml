<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="RankMap_8hpp" kind="file" language="C++">
    <compoundname>RankMap.hpp</compoundname>
    <includes local="no">vector</includes>
    <includes local="no">algorithm</includes>
    <includes refid="Slice_8hpp" local="no">atrip/Slice.hpp</includes>
    <includes refid="Tuples_8hpp" local="no">atrip/Tuples.hpp</includes>
    <includedby refid="SliceUnion_8hpp" local="no">SliceUnion.hpp</includedby>
    <incdepgraph>
      <node id="21">
        <label>functional</label>
      </node>
      <node id="22">
        <label>atrip/Blas.hpp</label>
        <link refid="Blas_8hpp"/>
      </node>
      <node id="1">
        <label>RankMap.hpp</label>
        <link refid="RankMap_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>atrip/Tuples.hpp</label>
        <link refid="Tuples_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>cassert</label>
      </node>
      <node id="9">
        <label>numeric</label>
      </node>
      <node id="18">
        <label>string</label>
      </node>
      <node id="12">
        <label>map</label>
      </node>
      <node id="16">
        <label>atrip/Utils.hpp</label>
        <link refid="Utils_8hpp"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>atrip/Debug.hpp</label>
        <link refid="Debug_8hpp"/>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>ctf.hpp</label>
      </node>
      <node id="2">
        <label>vector</label>
      </node>
      <node id="8">
        <label>array</label>
      </node>
      <node id="17">
        <label>sstream</label>
      </node>
      <node id="11">
        <label>math.h</label>
      </node>
      <node id="5">
        <label>iostream</label>
      </node>
      <node id="4">
        <label>atrip/Slice.hpp</label>
        <link refid="Slice_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>climits</label>
      </node>
      <node id="14">
        <label>chrono</label>
      </node>
      <node id="6">
        <label>mpi.h</label>
      </node>
      <node id="3">
        <label>algorithm</label>
      </node>
      <node id="10">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>RankMap.hpp</label>
        <link refid="RankMap_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>SliceUnion.hpp</label>
        <link refid="SliceUnion_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>Unions.hpp</label>
        <link refid="Unions_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>Atrip.cxx</label>
        <link refid="Atrip_8cxx"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structatrip_1_1RankMap" prot="public">atrip::RankMap</innerclass>
    <innernamespace refid="namespaceatrip">atrip</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2022<sp/>Alejandro<sp/>Gallo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[[file:../../atrip.org::*The<sp/>rank<sp/>mapping][The<sp/>rank<sp/>mapping:1]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="Slice_8hpp" kindref="compound">atrip/Slice.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="Tuples_8hpp" kindref="compound">atrip/Tuples.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceatrip" kindref="compound">atrip</ref><sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F=</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="27" refid="structatrip_1_1RankMap" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structatrip_1_1RankMap" kindref="compound">RankMap</ref><sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="structatrip_1_1RankMap_1ac0b8c9cc718d102197f4c373500c898a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structatrip_1_1RankMap_1ac0b8c9cc718d102197f4c373500c898a" kindref="member">RANK_ROUND_ROBIN</ref>;</highlight></codeline>
<codeline lineno="30" refid="structatrip_1_1RankMap_1a265e337d553853bf4c2b15703d9316c8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;size_t&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structatrip_1_1RankMap_1a265e337d553853bf4c2b15703d9316c8" kindref="member">lengths</ref>;</highlight></codeline>
<codeline lineno="31" refid="structatrip_1_1RankMap_1a9446d8e669ada2186bab67c0ada510f3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structatrip_1_1RankMap_1af64b2ce415e825b25000ab9e5f2a09e3" kindref="member">np</ref>,<sp/><ref refid="structatrip_1_1RankMap_1a9446d8e669ada2186bab67c0ada510f3" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="32" refid="structatrip_1_1RankMap_1af73c05557a7b53fd7524e60ed462b35e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structatrip_1_1ClusterInfo" kindref="compound">ClusterInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structatrip_1_1RankMap_1af73c05557a7b53fd7524e60ed462b35e" kindref="member">clusterInfo</ref>;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="structatrip_1_1RankMap_1a7b770e5c35a4edf4e8fc56bd9a9886e6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structatrip_1_1RankMap_1a7b770e5c35a4edf4e8fc56bd9a9886e6" kindref="member">RankMap</ref>(std::vector&lt;size_t&gt;<sp/>lens,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>np_,<sp/>MPI_Comm<sp/>comm)</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structatrip_1_1RankMap_1a265e337d553853bf4c2b15703d9316c8" kindref="member">lengths</ref>(lens)</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><ref refid="structatrip_1_1RankMap_1af64b2ce415e825b25000ab9e5f2a09e3" kindref="member">np</ref>(np_)</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><ref refid="structatrip_1_1RankMap_1a9446d8e669ada2186bab67c0ada510f3" kindref="member">size</ref>(std::accumulate(<ref refid="structatrip_1_1RankMap_1a265e337d553853bf4c2b15703d9316c8" kindref="member">lengths</ref>.begin(),<sp/><ref refid="structatrip_1_1RankMap_1a265e337d553853bf4c2b15703d9316c8" kindref="member">lengths</ref>.end(),</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1UL,<sp/>std::multiplies&lt;size_t&gt;()))</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><ref refid="structatrip_1_1RankMap_1af73c05557a7b53fd7524e60ed462b35e" kindref="member">clusterInfo</ref>(<ref refid="namespaceatrip_1af9fd13d6ed4a11730462a362543d6e26" kindref="member">getClusterInfo</ref>(comm))</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>assert(<ref refid="structatrip_1_1RankMap_1a265e337d553853bf4c2b15703d9316c8" kindref="member">lengths</ref>.size()<sp/>&lt;=<sp/>2);<sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="structatrip_1_1RankMap_1a6d5becc3ba428aa4d7ac26c5c6b1114a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structatrip_1_1RankMap_1a6d5becc3ba428aa4d7ac26c5c6b1114a" kindref="member">find</ref>(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structatrip_1_1Slice_1_1Location" kindref="compound">Slice&lt;F&gt;::Location</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>p)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structatrip_1_1RankMap_1ac0b8c9cc718d102197f4c373500c898a" kindref="member">RANK_ROUND_ROBIN</ref>)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p.source<sp/>*<sp/><ref refid="structatrip_1_1RankMap_1af64b2ce415e825b25000ab9e5f2a09e3" kindref="member">np</ref><sp/>+<sp/>p.rank;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rankPosition<sp/>=<sp/>p.source<sp/>*<sp/><ref refid="structatrip_1_1RankMap_1af73c05557a7b53fd7524e60ed462b35e" kindref="member">clusterInfo</ref>.<ref refid="structatrip_1_1ClusterInfo_1a636df31115df9361e5d787fca0b32817" kindref="member">ranksPerNode</ref></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/><ref refid="structatrip_1_1RankMap_1af73c05557a7b53fd7524e60ed462b35e" kindref="member">clusterInfo</ref>.<ref refid="structatrip_1_1ClusterInfo_1a6ad5fdc3b6e91f33582348725661722b" kindref="member">rankInfos</ref>[p.rank].localRank</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rankPosition<sp/>*<sp/><ref refid="structatrip_1_1RankMap_1af73c05557a7b53fd7524e60ed462b35e" kindref="member">clusterInfo</ref>.<ref refid="structatrip_1_1ClusterInfo_1a237c0bdaac8aff12e5e8c03fc0840177" kindref="member">nNodes</ref></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/><ref refid="structatrip_1_1RankMap_1af73c05557a7b53fd7524e60ed462b35e" kindref="member">clusterInfo</ref>.<ref refid="structatrip_1_1ClusterInfo_1a6ad5fdc3b6e91f33582348725661722b" kindref="member">rankInfos</ref>[p.rank].nodeId</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="structatrip_1_1RankMap_1a7ea842103ccde38ba37663002e0089c6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structatrip_1_1RankMap_1a7ea842103ccde38ba37663002e0089c6" kindref="member">nSources</ref>()<sp/>const<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structatrip_1_1RankMap_1a9446d8e669ada2186bab67c0ada510f3" kindref="member">size</ref><sp/>/<sp/><ref refid="structatrip_1_1RankMap_1af64b2ce415e825b25000ab9e5f2a09e3" kindref="member">np</ref><sp/>+<sp/>size_t(<ref refid="structatrip_1_1RankMap_1a9446d8e669ada2186bab67c0ada510f3" kindref="member">size</ref><sp/>%<sp/><ref refid="structatrip_1_1RankMap_1af64b2ce415e825b25000ab9e5f2a09e3" kindref="member">np</ref><sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="structatrip_1_1RankMap_1aeeb8bd03cfc197bbdd7c73245bd956e4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structatrip_1_1RankMap_1aeeb8bd03cfc197bbdd7c73245bd956e4" kindref="member">isPaddingRank</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>rank)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structatrip_1_1RankMap_1a9446d8e669ada2186bab67c0ada510f3" kindref="member">size</ref><sp/>%<sp/><ref refid="structatrip_1_1RankMap_1af64b2ce415e825b25000ab9e5f2a09e3" kindref="member">np</ref><sp/>==<sp/>0</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>false</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>rank<sp/>&gt;<sp/>(<ref refid="structatrip_1_1RankMap_1a9446d8e669ada2186bab67c0ada510f3" kindref="member">size</ref><sp/>%<sp/><ref refid="structatrip_1_1RankMap_1af64b2ce415e825b25000ab9e5f2a09e3" kindref="member">np</ref><sp/>-<sp/>1)</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="structatrip_1_1RankMap_1a489ad71146d35a5c2d22b94a04ae3770" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structatrip_1_1RankMap_1a489ad71146d35a5c2d22b94a04ae3770" kindref="member">isSourcePadding</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>rank,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>source)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>source<sp/>==<sp/><ref refid="structatrip_1_1RankMap_1a7ea842103ccde38ba37663002e0089c6" kindref="member">nSources</ref>()<sp/>&amp;&amp;<sp/><ref refid="structatrip_1_1RankMap_1aeeb8bd03cfc197bbdd7c73245bd956e4" kindref="member">isPaddingRank</ref>(rank);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structatrip_1_1Slice_1_1Location" kindref="compound">Slice&lt;F&gt;::Location</ref></highlight></codeline>
<codeline lineno="73" refid="structatrip_1_1RankMap_1a1f754793a757c579d91961b5d0390cfd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structatrip_1_1RankMap_1a1f754793a757c579d91961b5d0390cfd" kindref="member">find</ref>(<ref refid="namespaceatrip_1a28915c100861c4b2a8c868a4b8f1f233" kindref="member">ABCTuple</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>abc,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46" kindref="member">Slice&lt;F&gt;::Type</ref><sp/>sliceType)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>tuple<sp/>=<sp/>{11,<sp/>8}<sp/>when<sp/>abc<sp/>=<sp/>{11,<sp/>8,<sp/>9}<sp/>and<sp/>sliceType<sp/>=<sp/>AB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>tuple<sp/>=<sp/>{11,<sp/>0}<sp/>when<sp/>abc<sp/>=<sp/>{11,<sp/>8,<sp/>9}<sp/>and<sp/>sliceType<sp/>=<sp/>A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tuple<sp/>=<sp/><ref refid="structatrip_1_1Slice_1a07166aae255c90bcbb117bf1e8e2fb56" kindref="member">Slice&lt;F&gt;::subtupleBySlice</ref>(abc,<sp/>sliceType);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>tuple[0]</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>tuple[1]<sp/>*<sp/>(<ref refid="structatrip_1_1RankMap_1a265e337d553853bf4c2b15703d9316c8" kindref="member">lengths</ref>.size()<sp/>&gt;<sp/>1<sp/>?<sp/><ref refid="structatrip_1_1RankMap_1a265e337d553853bf4c2b15703d9316c8" kindref="member">lengths</ref>[0]<sp/>:<sp/>0)</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>rank,<sp/>source;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structatrip_1_1RankMap_1ac0b8c9cc718d102197f4c373500c898a" kindref="member">RANK_ROUND_ROBIN</ref>)<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rank<sp/>=<sp/>index<sp/>%<sp/><ref refid="structatrip_1_1RankMap_1af64b2ce415e825b25000ab9e5f2a09e3" kindref="member">np</ref>;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>source<sp/>=<sp/>index<sp/>/<sp/><ref refid="structatrip_1_1RankMap_1af64b2ce415e825b25000ab9e5f2a09e3" kindref="member">np</ref>;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>node<sp/>that<sp/>will<sp/>be<sp/>assigned<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodeId<sp/>=<sp/>index<sp/>%<sp/><ref refid="structatrip_1_1RankMap_1af73c05557a7b53fd7524e60ed462b35e" kindref="member">clusterInfo</ref>.<ref refid="structatrip_1_1ClusterInfo_1a237c0bdaac8aff12e5e8c03fc0840177" kindref="member">nNodes</ref></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>how<sp/>many<sp/>times<sp/>it<sp/>has<sp/>been<sp/>assigned<sp/>to<sp/>the<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>s_n<sp/>=<sp/>index<sp/>/<sp/><ref refid="structatrip_1_1RankMap_1af73c05557a7b53fd7524e60ed462b35e" kindref="member">clusterInfo</ref>.<ref refid="structatrip_1_1ClusterInfo_1a237c0bdaac8aff12e5e8c03fc0840177" kindref="member">nNodes</ref></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>local<sp/>rank<sp/>in<sp/>the<sp/>node<sp/>should<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>localRank<sp/>=<sp/>s_n<sp/>%<sp/><ref refid="structatrip_1_1RankMap_1af73c05557a7b53fd7524e60ed462b35e" kindref="member">clusterInfo</ref>.<ref refid="structatrip_1_1ClusterInfo_1a636df31115df9361e5d787fca0b32817" kindref="member">ranksPerNode</ref></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>the<sp/>local<sp/>source<sp/>(how<sp/>many<sp/>times<sp/>we<sp/>chose<sp/>this<sp/>local<sp/>rank)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>localSource<sp/>=<sp/>s_n<sp/>/<sp/><ref refid="structatrip_1_1RankMap_1af73c05557a7b53fd7524e60ed462b35e" kindref="member">clusterInfo</ref>.<ref refid="structatrip_1_1ClusterInfo_1a636df31115df9361e5d787fca0b32817" kindref="member">ranksPerNode</ref></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>the<sp/>localRank-th<sp/>entry<sp/>in<sp/>clusterInfo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>it<sp/>=</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::find_if(<ref refid="structatrip_1_1RankMap_1af73c05557a7b53fd7524e60ed462b35e" kindref="member">clusterInfo</ref>.<ref refid="structatrip_1_1ClusterInfo_1a6ad5fdc3b6e91f33582348725661722b" kindref="member">rankInfos</ref>.begin(),</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structatrip_1_1RankMap_1af73c05557a7b53fd7524e60ed462b35e" kindref="member">clusterInfo</ref>.<ref refid="structatrip_1_1ClusterInfo_1a6ad5fdc3b6e91f33582348725661722b" kindref="member">rankInfos</ref>.end(),</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[nodeId,<sp/>localRank](<ref refid="structatrip_1_1RankInfo" kindref="compound">RankInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>ri)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>ri.nodeId<sp/>==<sp/>nodeId</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>ri.localRank<sp/>==<sp/>localRank</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/><ref refid="structatrip_1_1RankMap_1af73c05557a7b53fd7524e60ed462b35e" kindref="member">clusterInfo</ref>.<ref refid="structatrip_1_1ClusterInfo_1a6ad5fdc3b6e91f33582348725661722b" kindref="member">rankInfos</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;FATAL!<sp/>Error<sp/>in<sp/>node<sp/>distribution<sp/>of<sp/>the<sp/>slices&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rank<sp/>=<sp/>(*it).globalRank;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>source<sp/>=<sp/>localSource;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>rank</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>source</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal">}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>rank<sp/>mapping:1<sp/>ends<sp/>here</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/atrip/atrip/include/atrip/RankMap.hpp"/>
  </compounddef>
</doxygen>
