<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="Slice_8hpp" kind="file" language="C++">
    <compoundname>Slice.hpp</compoundname>
    <includes local="no">iostream</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">vector</includes>
    <includes local="no">mpi.h</includes>
    <includes refid="Tuples_8hpp" local="no">atrip/Tuples.hpp</includes>
    <includes refid="Utils_8hpp" local="no">atrip/Utils.hpp</includes>
    <includes refid="Blas_8hpp" local="no">atrip/Blas.hpp</includes>
    <includedby refid="Equations_8hpp" local="no">Equations.hpp</includedby>
    <includedby refid="RankMap_8hpp" local="no">RankMap.hpp</includedby>
    <includedby refid="SliceUnion_8hpp" local="no">SliceUnion.hpp</includedby>
    <incdepgraph>
      <node id="21">
        <label>atrip/Blas.hpp</label>
        <link refid="Blas_8hpp"/>
      </node>
      <node id="19">
        <label>atrip/Debug.hpp</label>
        <link refid="Debug_8hpp"/>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>Slice.hpp</label>
        <link refid="Slice_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>atrip/Tuples.hpp</label>
        <link refid="Tuples_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>atrip/Utils.hpp</label>
        <link refid="Utils_8hpp"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>algorithm</label>
      </node>
      <node id="7">
        <label>array</label>
      </node>
      <node id="12">
        <label>cassert</label>
      </node>
      <node id="13">
        <label>chrono</label>
      </node>
      <node id="14">
        <label>climits</label>
      </node>
      <node id="18">
        <label>ctf.hpp</label>
      </node>
      <node id="20">
        <label>functional</label>
      </node>
      <node id="2">
        <label>iostream</label>
      </node>
      <node id="11">
        <label>map</label>
      </node>
      <node id="10">
        <label>math.h</label>
      </node>
      <node id="5">
        <label>mpi.h</label>
      </node>
      <node id="8">
        <label>numeric</label>
      </node>
      <node id="16">
        <label>sstream</label>
      </node>
      <node id="9">
        <label>stdio.h</label>
      </node>
      <node id="17">
        <label>string</label>
      </node>
      <node id="4">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>Equations.hpp</label>
        <link refid="Equations_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>RankMap.hpp</label>
        <link refid="RankMap_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>Slice.hpp</label>
        <link refid="Slice_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>SliceUnion.hpp</label>
        <link refid="SliceUnion_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>Unions.hpp</label>
        <link refid="Unions_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>Atrip.cxx</label>
        <link refid="Atrip_8cxx"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structatrip_1_1Slice" prot="public">atrip::Slice</innerclass>
    <innerclass refid="structatrip_1_1Slice_1_1Location" prot="public">atrip::Slice::Location</innerclass>
    <innerclass refid="structatrip_1_1Slice_1_1Info" prot="public">atrip::Slice::Info</innerclass>
    <innerclass refid="structatrip_1_1Slice_1_1LocalDatabaseElement" prot="public">atrip::Slice::LocalDatabaseElement</innerclass>
    <innerclass refid="structatrip_1_1Slice_1_1mpi" prot="public">atrip::Slice::mpi</innerclass>
    <innernamespace refid="namespaceatrip">atrip</innernamespace>
    <innernamespace refid="namespaceatrip_1_1traits">atrip::traits</innernamespace>
    <innernamespace refid="namespaceatrip_1_1traits_1_1mpi">atrip::traits::mpi</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2022<sp/>Alejandro<sp/>Gallo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[[file:../../atrip.org::*Prolog][Prolog:1]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;mpi.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="Tuples_8hpp" kindref="compound">atrip/Tuples.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="Utils_8hpp" kindref="compound">atrip/Utils.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="Blas_8hpp" kindref="compound">atrip/Blas.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceatrip" kindref="compound">atrip</ref><sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="namespaceatrip_1a2e0cfc31bb96f193faaf7577e9d8ff86" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FF&gt;<sp/>FF<sp/><ref refid="namespaceatrip_1a2e0cfc31bb96f193faaf7577e9d8ff86" kindref="member">maybeConjugate</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FF<sp/>a)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a;<sp/>}</highlight></codeline>
<codeline lineno="29" refid="namespaceatrip_1a3109af0495d84e38227d528cd87b4bbb" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/><ref refid="namespaceatrip_1aa4158a2e7e79c518dcb11d7ccfc1c82f" kindref="member">Complex</ref><sp/><ref refid="namespaceatrip_1a2e0cfc31bb96f193faaf7577e9d8ff86" kindref="member">maybeConjugate</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceatrip_1aa4158a2e7e79c518dcb11d7ccfc1c82f" kindref="member">Complex</ref><sp/>a)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::conj(a);<sp/>}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="namespaceatrip_1_1traits" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">traits<sp/>{</highlight></codeline>
<codeline lineno="32" refid="namespaceatrip_1_1traits_1ac5c317b719c6ea751a3da3cb11a26a2f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FF&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceatrip_1_1traits_1ac5c317b719c6ea751a3da3cb11a26a2f" kindref="member">isComplex</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="33" refid="namespaceatrip_1_1traits_1acb15e4dc55bc4d3c9277ac5ed40b8ef4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceatrip_1_1traits_1acb15e4dc55bc4d3c9277ac5ed40b8ef4" kindref="member">isComplex&lt;Complex&gt;</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="34" refid="namespaceatrip_1_1traits_1_1mpi" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">mpi<sp/>{</highlight></codeline>
<codeline lineno="35" refid="namespaceatrip_1_1traits_1_1mpi_1ac5cddb4841206f9704c515491f9b7892" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FF&gt;<sp/>MPI_Datatype<sp/><ref refid="namespaceatrip_1_1traits_1_1mpi_1ac5cddb4841206f9704c515491f9b7892" kindref="member">datatypeOf</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="36" refid="namespaceatrip_1_1traits_1_1mpi_1ab2b7059ea380f3639caeae806f3255b5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/>MPI_Datatype<sp/><ref refid="namespaceatrip_1_1traits_1_1mpi_1ab2b7059ea380f3639caeae806f3255b5" kindref="member">datatypeOf&lt;double&gt;</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MPI_DOUBLE;<sp/>}</highlight></codeline>
<codeline lineno="37" refid="namespaceatrip_1_1traits_1_1mpi_1a95ed3fa24afbdb708d2e4525f6abe027" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/>MPI_Datatype<sp/><ref refid="namespaceatrip_1_1traits_1_1mpi_1a95ed3fa24afbdb708d2e4525f6abe027" kindref="member">datatypeOf&lt;Complex&gt;</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MPI_DOUBLE_COMPLEX;<sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal">}</highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F=</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="43" refid="structatrip_1_1Slice" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structatrip_1_1Slice" kindref="compound">Slice</ref><sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Prolog:1<sp/>ends<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[[file:../../atrip.org::*Location][Location:1]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="structatrip_1_1Slice_1_1Location_1adafd6595edf2739cd0a2a31eb1bf57e6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structatrip_1_1Slice_1_1Location" kindref="compound">Location</ref><sp/>{<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structatrip_1_1Slice_1_1Location_1adafd6595edf2739cd0a2a31eb1bf57e6" kindref="member">rank</ref>;<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structatrip_1_1Slice_1_1Location_1a4ae8c64c9ef47d9ebebd04598b1bb35f" kindref="member">source</ref>;<sp/>};</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Location:1<sp/>ends<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[[file:../../atrip.org::*Type][Type:1]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46" kindref="member">Type</ref></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46ac37202de596dc7eb8a95a68a168750ba" kindref="member">A</ref><sp/>=<sp/>10</highlight></codeline>
<codeline lineno="53" refid="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46ac37202de596dc7eb8a95a68a168750ba" refkind="member"><highlight class="normal"><sp/><sp/>,<sp/><ref refid="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46ab0cc4fdf016372ae51b4b33f19970877" kindref="member">B</ref></highlight></codeline>
<codeline lineno="54" refid="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46ab0cc4fdf016372ae51b4b33f19970877" refkind="member"><highlight class="normal"><sp/><sp/>,<sp/><ref refid="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46a4d34dab093e3bc7dc5a6afa466dfc7a3" kindref="member">C</ref></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Two-parameter<sp/>slices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46a4d34dab093e3bc7dc5a6afa466dfc7a3" refkind="member"><highlight class="normal"><sp/><sp/>,<sp/><ref refid="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46a95d8dd6c535cdf180d9b78fea1dabd2c" kindref="member">AB</ref><sp/>=<sp/>20</highlight></codeline>
<codeline lineno="57" refid="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46a95d8dd6c535cdf180d9b78fea1dabd2c" refkind="member"><highlight class="normal"><sp/><sp/>,<sp/><ref refid="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46a56b6bbbe684c42ebf26bb91d68921b42" kindref="member">BC</ref></highlight></codeline>
<codeline lineno="58" refid="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46a56b6bbbe684c42ebf26bb91d68921b42" refkind="member"><highlight class="normal"><sp/><sp/>,<sp/><ref refid="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46aed801e2742ba2af5a55804d6e0e7613e" kindref="member">AC</ref></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>abci<sp/>and<sp/>the<sp/>doubles</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46aed801e2742ba2af5a55804d6e0e7613e" refkind="member"><highlight class="normal"><sp/><sp/>,<sp/><ref refid="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46a1781b62e2b19583ea840692812d17cea" kindref="member">CB</ref></highlight></codeline>
<codeline lineno="61" refid="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46a1781b62e2b19583ea840692812d17cea" refkind="member"><highlight class="normal"><sp/><sp/>,<sp/><ref refid="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46a95b07e2180c2f7003f986104dfb85677" kindref="member">BA</ref></highlight></codeline>
<codeline lineno="62" refid="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46a95b07e2180c2f7003f986104dfb85677" refkind="member"><highlight class="normal"><sp/><sp/>,<sp/><ref refid="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46a5d98c0f033fde70dd1b2d48220a4726d" kindref="member">CA</ref></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>non-typed<sp/>slice</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64" refid="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46a5d98c0f033fde70dd1b2d48220a4726d" refkind="member"><highlight class="normal"><sp/><sp/>,<sp/><ref refid="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46ac32b5c11df3f14116f3fddf2bc10a55e" kindref="member">Blank</ref><sp/>=<sp/>404</highlight></codeline>
<codeline lineno="65" refid="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46ac32b5c11df3f14116f3fddf2bc10a55e" refkind="member"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Type:1<sp/>ends<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[[file:../../atrip.org::*State][State:1]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="structatrip_1_1Slice_1ade9f7c874828268e1cc03d5da85734a0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="structatrip_1_1Slice_1ade9f7c874828268e1cc03d5da85734a0" kindref="member">State</ref><sp/>{</highlight></codeline>
<codeline lineno="70" refid="structatrip_1_1Slice_1ade9f7c874828268e1cc03d5da85734a0a5651eced6ec56a1720f3e315c7fad891" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structatrip_1_1Slice_1ade9f7c874828268e1cc03d5da85734a0a5651eced6ec56a1720f3e315c7fad891" kindref="member">Fetch</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="71" refid="structatrip_1_1Slice_1ade9f7c874828268e1cc03d5da85734a0ae6d67fb1c5af3b568ab9ad22659ce152" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structatrip_1_1Slice_1ade9f7c874828268e1cc03d5da85734a0ae6d67fb1c5af3b568ab9ad22659ce152" kindref="member">Dispatched</ref><sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="72" refid="structatrip_1_1Slice_1ade9f7c874828268e1cc03d5da85734a0a08aec9b7b59e8a3ee12a965bf4d7afd9" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structatrip_1_1Slice_1ade9f7c874828268e1cc03d5da85734a0a08aec9b7b59e8a3ee12a965bf4d7afd9" kindref="member">Ready</ref><sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="73" refid="structatrip_1_1Slice_1ade9f7c874828268e1cc03d5da85734a0a57a108e7e6561000ac9f7d9e9b9317b9" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structatrip_1_1Slice_1ade9f7c874828268e1cc03d5da85734a0a57a108e7e6561000ac9f7d9e9b9317b9" kindref="member">SelfSufficient</ref><sp/>=<sp/>911,</highlight></codeline>
<codeline lineno="74" refid="structatrip_1_1Slice_1ade9f7c874828268e1cc03d5da85734a0af916232db704e602917e8b38720e5863" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structatrip_1_1Slice_1ade9f7c874828268e1cc03d5da85734a0af916232db704e602917e8b38720e5863" kindref="member">Recycled</ref><sp/>=<sp/>123,</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><ref refid="structatrip_1_1Slice_1ade9f7c874828268e1cc03d5da85734a0a37b0da7cf0ebee6184b29c2c212574e7" kindref="member">Acceptor</ref><sp/>=<sp/>405</highlight></codeline>
<codeline lineno="76" refid="structatrip_1_1Slice_1ade9f7c874828268e1cc03d5da85734a0a37b0da7cf0ebee6184b29c2c212574e7" refkind="member"><highlight class="normal">};</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//<sp/>State:1<sp/>ends<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[[file:../../atrip.org::*The<sp/>Info<sp/>structure][The<sp/>Info<sp/>structure:1]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="structatrip_1_1Slice_1_1Info" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structatrip_1_1Slice_1_1Info" kindref="compound">Info</ref><sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>part<sp/>of<sp/>a,b,c<sp/>the<sp/>slice<sp/>holds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82" refid="structatrip_1_1Slice_1_1Info_1aead2cf6df57d78d19df52bcde0ec2054" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="namespaceatrip_1a8b97b58a2469967c1a6da53511879c7b" kindref="member">PartialTuple</ref><sp/><ref refid="structatrip_1_1Slice_1_1Info_1aead2cf6df57d78d19df52bcde0ec2054" kindref="member">tuple</ref>;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>type<sp/>of<sp/>slice<sp/>for<sp/>the<sp/>user<sp/>to<sp/>retrieve<sp/>the<sp/>correct<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84" refid="structatrip_1_1Slice_1_1Info_1a906b399e728a367f9c64cdb87ec53dc0" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46" kindref="member">Type</ref><sp/><ref refid="structatrip_1_1Slice_1_1Info_1a906b399e728a367f9c64cdb87ec53dc0" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>What<sp/>is<sp/>the<sp/>state<sp/>of<sp/>the<sp/>slice</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86" refid="structatrip_1_1Slice_1_1Info_1a95ae928785594ad332204f3377cd241e" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structatrip_1_1Slice_1ade9f7c874828268e1cc03d5da85734a0" kindref="member">State</ref><sp/><ref refid="structatrip_1_1Slice_1_1Info_1a95ae928785594ad332204f3377cd241e" kindref="member">state</ref>;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Where<sp/>the<sp/>slice<sp/>is<sp/>to<sp/>be<sp/>retrieved</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88" refid="structatrip_1_1Slice_1_1Info_1ab096637d74752ff7c072bc34812618b6" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structatrip_1_1Slice_1_1Location" kindref="compound">Location</ref><sp/><ref refid="structatrip_1_1Slice_1_1Info_1ab096637d74752ff7c072bc34812618b6" kindref="member">from</ref>;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>data<sp/>are<sp/>actually<sp/>to<sp/>be<sp/>found<sp/>in<sp/>this<sp/>other<sp/>slice</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="structatrip_1_1Slice_1_1Info_1a3ddb161e7d7f645840f671df30ac4888" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46" kindref="member">Type</ref><sp/><ref refid="structatrip_1_1Slice_1_1Info_1a3ddb161e7d7f645840f671df30ac4888" kindref="member">recycling</ref>;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92" refid="structatrip_1_1Slice_1_1Info_1adbee4f0ea45a68d04f65e572d3bb1196" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structatrip_1_1Slice_1_1Info_1adbee4f0ea45a68d04f65e572d3bb1196" kindref="member">Info</ref>()<sp/>:<sp/><ref refid="structatrip_1_1Slice_1_1Info_1aead2cf6df57d78d19df52bcde0ec2054" kindref="member">tuple</ref>{0,0}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><ref refid="structatrip_1_1Slice_1_1Info_1a906b399e728a367f9c64cdb87ec53dc0" kindref="member">type</ref>{<ref refid="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46ac32b5c11df3f14116f3fddf2bc10a55e" kindref="member">Blank</ref>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><ref refid="structatrip_1_1Slice_1_1Info_1a95ae928785594ad332204f3377cd241e" kindref="member">state</ref>{<ref refid="structatrip_1_1Slice_1ade9f7c874828268e1cc03d5da85734a0a37b0da7cf0ebee6184b29c2c212574e7" kindref="member">Acceptor</ref>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><ref refid="structatrip_1_1Slice_1_1Info_1ab096637d74752ff7c072bc34812618b6" kindref="member">from</ref>{0,0}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><ref refid="structatrip_1_1Slice_1_1Info_1a3ddb161e7d7f645840f671df30ac4888" kindref="member">recycling</ref>{<ref refid="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46ac32b5c11df3f14116f3fddf2bc10a55e" kindref="member">Blank</ref>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="98"><highlight class="normal">};</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100" refid="structatrip_1_1Slice_1a9ee6254fe98a83b507ca88ec92dd5227" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structatrip_1_1Slice_1a9ee6254fe98a83b507ca88ec92dd5227" kindref="member">Ty_x_Tu</ref><sp/>=<sp/>std::pair&lt;<sp/>Type,<sp/>PartialTuple<sp/>&gt;;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>Info<sp/>structure:1<sp/>ends<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[[file:../../atrip.org::*Name][Name:1]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104" refid="structatrip_1_1Slice_1ab62f723a61f7d96ff457aa0980a50806" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="structatrip_1_1Slice_1ab62f723a61f7d96ff457aa0980a50806" kindref="member">Name</ref></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="structatrip_1_1Slice_1ab62f723a61f7d96ff457aa0980a50806a7eaa6927fdb18899e6a074efb86e8ff0" kindref="member">TA</ref><sp/><sp/><sp/><sp/>=<sp/>100</highlight></codeline>
<codeline lineno="106" refid="structatrip_1_1Slice_1ab62f723a61f7d96ff457aa0980a50806a7eaa6927fdb18899e6a074efb86e8ff0" refkind="member"><highlight class="normal"><sp/><sp/>,<sp/><ref refid="structatrip_1_1Slice_1ab62f723a61f7d96ff457aa0980a50806a54ca340c35868c536f767e6cd25af16e" kindref="member">VIJKA</ref><sp/>=<sp/>101</highlight></codeline>
<codeline lineno="107" refid="structatrip_1_1Slice_1ab62f723a61f7d96ff457aa0980a50806a54ca340c35868c536f767e6cd25af16e" refkind="member"><highlight class="normal"><sp/><sp/>,<sp/><ref refid="structatrip_1_1Slice_1ab62f723a61f7d96ff457aa0980a50806af35e8f182569229bb6eecffa58eba1eb" kindref="member">VABCI</ref><sp/>=<sp/>200</highlight></codeline>
<codeline lineno="108" refid="structatrip_1_1Slice_1ab62f723a61f7d96ff457aa0980a50806af35e8f182569229bb6eecffa58eba1eb" refkind="member"><highlight class="normal"><sp/><sp/>,<sp/><ref refid="structatrip_1_1Slice_1ab62f723a61f7d96ff457aa0980a50806a80b26620da8680b6e19501a07fbfc2cf" kindref="member">TABIJ</ref><sp/>=<sp/>201</highlight></codeline>
<codeline lineno="109" refid="structatrip_1_1Slice_1ab62f723a61f7d96ff457aa0980a50806a80b26620da8680b6e19501a07fbfc2cf" refkind="member"><highlight class="normal"><sp/><sp/>,<sp/><ref refid="structatrip_1_1Slice_1ab62f723a61f7d96ff457aa0980a50806a7f84e9e4065b546c2a6793e1eca6f0cf" kindref="member">VABIJ</ref><sp/>=<sp/>202</highlight></codeline>
<codeline lineno="110" refid="structatrip_1_1Slice_1ab62f723a61f7d96ff457aa0980a50806a7f84e9e4065b546c2a6793e1eca6f0cf" refkind="member"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Name:1<sp/>ends<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[[file:../../atrip.org::*Database][Database:1]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114" refid="structatrip_1_1Slice_1_1LocalDatabaseElement" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structatrip_1_1Slice_1_1LocalDatabaseElement" kindref="compound">LocalDatabaseElement</ref><sp/>{</highlight></codeline>
<codeline lineno="115" refid="structatrip_1_1Slice_1_1LocalDatabaseElement_1a071e50a7b7adcf28955b3c0f40dea720" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structatrip_1_1Slice_1ab62f723a61f7d96ff457aa0980a50806" kindref="member">Slice&lt;F&gt;::Name</ref><sp/><ref refid="structatrip_1_1Slice_1_1LocalDatabaseElement_1a071e50a7b7adcf28955b3c0f40dea720" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="116" refid="structatrip_1_1Slice_1_1LocalDatabaseElement_1a732f1eeac9b26b16d6fa40b022c1caa8" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structatrip_1_1Slice_1_1Info" kindref="compound">Slice&lt;F&gt;::Info</ref><sp/><ref refid="structatrip_1_1Slice_1_1LocalDatabaseElement_1a732f1eeac9b26b16d6fa40b022c1caa8" kindref="member">info</ref>;</highlight></codeline>
<codeline lineno="117"><highlight class="normal">};</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Database:1<sp/>ends<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[[file:../../atrip.org::*Database][Database:2]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121" refid="structatrip_1_1Slice_1a82088d08e7e28f88623fc0253bb0d730" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structatrip_1_1Slice_1a82088d08e7e28f88623fc0253bb0d730" kindref="member">LocalDatabase</ref><sp/>=<sp/>std::vector&lt;LocalDatabaseElement&gt;;</highlight></codeline>
<codeline lineno="122" refid="structatrip_1_1Slice_1a464f534f896f1b8e24fefbdbef28fa29" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structatrip_1_1Slice_1a464f534f896f1b8e24fefbdbef28fa29" kindref="member">Database</ref><sp/>=<sp/><ref refid="structatrip_1_1Slice_1a82088d08e7e28f88623fc0253bb0d730" kindref="member">LocalDatabase</ref>;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Database:2<sp/>ends<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[[file:../../atrip.org::*MPI<sp/>Types][MPI<sp/>Types:1]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126" refid="structatrip_1_1Slice_1_1mpi" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structatrip_1_1Slice_1_1mpi" kindref="compound">mpi</ref><sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128" refid="structatrip_1_1Slice_1_1mpi_1a320eaefea6f5238ac8f490ba85c9bdb0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>MPI_Datatype<sp/><ref refid="structatrip_1_1Slice_1_1mpi_1a320eaefea6f5238ac8f490ba85c9bdb0" kindref="member">vector</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/>MPI_Datatype<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>DT)<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Datatype<sp/>dt;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Type_vector(n,<sp/>1,<sp/>1,<sp/>DT,<sp/>&amp;dt);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Type_commit(&amp;dt);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dt;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135" refid="structatrip_1_1Slice_1_1mpi_1aa975c4dfa6d925bcac1e0e305de882b7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>MPI_Datatype<sp/><ref refid="structatrip_1_1Slice_1_1mpi_1aa975c4dfa6d925bcac1e0e305de882b7" kindref="member">sliceLocation</ref><sp/>()<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>sliceLocation<sp/>to<sp/>measure<sp/>in<sp/>the<sp/>current<sp/>architecture</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>packing<sp/>of<sp/>the<sp/>struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structatrip_1_1Slice_1_1Location" kindref="compound">Slice&lt;F&gt;::Location</ref><sp/>measure;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Datatype<sp/>dt;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;<sp/>lengths(n,<sp/>1);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MPI_Datatype<sp/>types[n]<sp/>=<sp/>{<ref refid="structatrip_1_1Slice_1_1mpi_1a86502ca13faa0b4238c6c8c8c2c834a7" kindref="member">usizeDt</ref>(),<sp/><ref refid="structatrip_1_1Slice_1_1mpi_1a86502ca13faa0b4238c6c8c8c2c834a7" kindref="member">usizeDt</ref>()};</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structatrip_1_1Slice_1_1Location" kindref="compound">Slice&lt;F&gt;::Location</ref>)<sp/>==<sp/>2<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;The<sp/>Location<sp/>packing<sp/>is<sp/>wrong<sp/>in<sp/>your<sp/>compiler&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>measure<sp/>the<sp/>displacements<sp/>in<sp/>the<sp/>struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Aint<sp/>base_address,<sp/>displacements[n];</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Get_address(&amp;measure,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;base_address);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Get_address(&amp;measure.<ref refid="structatrip_1_1Slice_1_1Location_1adafd6595edf2739cd0a2a31eb1bf57e6" kindref="member">rank</ref>,<sp/><sp/><sp/>&amp;displacements[j++]);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Get_address(&amp;measure.<ref refid="structatrip_1_1Slice_1_1Location_1a4ae8c64c9ef47d9ebebd04598b1bb35f" kindref="member">source</ref>,<sp/>&amp;displacements[j++]);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>displacements[i]<sp/>=<sp/>MPI_Aint_diff(displacements[i],<sp/>base_address);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Type_create_struct(n,<sp/>lengths.data(),<sp/>displacements,<sp/>types,<sp/>&amp;dt);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Type_commit(&amp;dt);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dt;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161" refid="structatrip_1_1Slice_1_1mpi_1a86502ca13faa0b4238c6c8c8c2c834a7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>MPI_Datatype<sp/><ref refid="structatrip_1_1Slice_1_1mpi_1a86502ca13faa0b4238c6c8c8c2c834a7" kindref="member">usizeDt</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MPI_UINT64_T;<sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163" refid="structatrip_1_1Slice_1_1mpi_1ae2b01fb82834442096abf8d020b3cbf1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>MPI_Datatype<sp/><ref refid="structatrip_1_1Slice_1_1mpi_1ae2b01fb82834442096abf8d020b3cbf1" kindref="member">sliceInfo</ref><sp/>()<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Datatype<sp/>dt;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structatrip_1_1Slice_1_1Info" kindref="compound">Slice&lt;F&gt;::Info</ref><sp/>measure;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;<sp/>lengths(n,<sp/>1);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MPI_Datatype<sp/>types[n]</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>{<sp/><ref refid="structatrip_1_1Slice_1_1mpi_1a320eaefea6f5238ac8f490ba85c9bdb0" kindref="member">vector</ref>(2,<sp/><ref refid="structatrip_1_1Slice_1_1mpi_1a86502ca13faa0b4238c6c8c8c2c834a7" kindref="member">usizeDt</ref>())</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><ref refid="structatrip_1_1Slice_1_1mpi_1a320eaefea6f5238ac8f490ba85c9bdb0" kindref="member">vector</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46" kindref="member">Type</ref>),<sp/>MPI_CHAR)</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><ref refid="structatrip_1_1Slice_1_1mpi_1a320eaefea6f5238ac8f490ba85c9bdb0" kindref="member">vector</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="structatrip_1_1Slice_1ade9f7c874828268e1cc03d5da85734a0" kindref="member">State</ref>),<sp/>MPI_CHAR)</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><ref refid="structatrip_1_1Slice_1_1mpi_1aa975c4dfa6d925bcac1e0e305de882b7" kindref="member">sliceLocation</ref>()</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><ref refid="structatrip_1_1Slice_1_1mpi_1a320eaefea6f5238ac8f490ba85c9bdb0" kindref="member">vector</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46" kindref="member">Type</ref>),<sp/>MPI_CHAR)</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Why<sp/>this<sp/>does<sp/>not<sp/>work<sp/>on<sp/>intel<sp/>mpi?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*,<sp/>MPI_UINT64_T*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46" kindref="member">Type</ref>)<sp/><sp/>==<sp/>4,<sp/></highlight><highlight class="stringliteral">&quot;Enum<sp/>type<sp/>not<sp/>4<sp/>bytes<sp/>long&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="structatrip_1_1Slice_1ade9f7c874828268e1cc03d5da85734a0" kindref="member">State</ref>)<sp/>==<sp/>4,<sp/></highlight><highlight class="stringliteral">&quot;Enum<sp/>State<sp/>not<sp/>4<sp/>bytes<sp/>long&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="structatrip_1_1Slice_1ab62f723a61f7d96ff457aa0980a50806" kindref="member">Name</ref>)<sp/><sp/>==<sp/>4,<sp/></highlight><highlight class="stringliteral">&quot;Enum<sp/>Name<sp/>not<sp/>4<sp/>bytes<sp/>long&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>the<sp/>displacements<sp/>from<sp/>the<sp/>info<sp/>measurement<sp/>struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Aint<sp/>base_address,<sp/>displacements[n];</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Get_address(&amp;measure,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;base_address);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Get_address(&amp;measure.<ref refid="structatrip_1_1Slice_1_1Info_1aead2cf6df57d78d19df52bcde0ec2054" kindref="member">tuple</ref>[0],<sp/><sp/><sp/><sp/>&amp;displacements[j++]);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Get_address(&amp;measure.<ref refid="structatrip_1_1Slice_1_1Info_1a906b399e728a367f9c64cdb87ec53dc0" kindref="member">type</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;displacements[j++]);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Get_address(&amp;measure.<ref refid="structatrip_1_1Slice_1_1Info_1a95ae928785594ad332204f3377cd241e" kindref="member">state</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;displacements[j++]);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Get_address(&amp;measure.<ref refid="structatrip_1_1Slice_1_1Info_1ab096637d74752ff7c072bc34812618b6" kindref="member">from</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;displacements[j++]);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Get_address(&amp;measure.<ref refid="structatrip_1_1Slice_1_1Info_1a3ddb161e7d7f645840f671df30ac4888" kindref="member">recycling</ref>,<sp/><sp/><sp/>&amp;displacements[j++]);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>displacements[i]<sp/>=<sp/>MPI_Aint_diff(displacements[i],<sp/>base_address);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Type_create_struct(n,<sp/>lengths.data(),<sp/>displacements,<sp/>types,<sp/>&amp;dt);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Type_commit(&amp;dt);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dt;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199" refid="structatrip_1_1Slice_1_1mpi_1a683412cfa56e875df04fd82a3530f332" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>MPI_Datatype<sp/><ref refid="structatrip_1_1Slice_1_1mpi_1a683412cfa56e875df04fd82a3530f332" kindref="member">localDatabaseElement</ref><sp/>()<sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Datatype<sp/>dt;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structatrip_1_1Slice_1_1LocalDatabaseElement" kindref="compound">LocalDatabaseElement</ref><sp/>measure;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;<sp/>lengths(n,<sp/>1);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MPI_Datatype<sp/>types[n]</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>{<sp/><ref refid="structatrip_1_1Slice_1_1mpi_1a320eaefea6f5238ac8f490ba85c9bdb0" kindref="member">vector</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="structatrip_1_1Slice_1ab62f723a61f7d96ff457aa0980a50806" kindref="member">Name</ref>),<sp/>MPI_CHAR)</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><ref refid="structatrip_1_1Slice_1_1mpi_1ae2b01fb82834442096abf8d020b3cbf1" kindref="member">sliceInfo</ref>()</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>measure<sp/>the<sp/>displacements<sp/>in<sp/>the<sp/>struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Aint<sp/>base_address,<sp/>displacements[n];</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Get_address(&amp;measure,<sp/><sp/><sp/><sp/><sp/><sp/>&amp;base_address);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Get_address(&amp;measure.<ref refid="structatrip_1_1Slice_1_1LocalDatabaseElement_1a071e50a7b7adcf28955b3c0f40dea720" kindref="member">name</ref>,<sp/>&amp;displacements[j++]);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Get_address(&amp;measure.<ref refid="structatrip_1_1Slice_1_1LocalDatabaseElement_1a732f1eeac9b26b16d6fa40b022c1caa8" kindref="member">info</ref>,<sp/>&amp;displacements[j++]);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>displacements[i]<sp/>=<sp/>MPI_Aint_diff(displacements[i],<sp/>base_address);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structatrip_1_1Slice_1_1LocalDatabaseElement" kindref="compound">LocalDatabaseElement</ref>)<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(measure)</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/></highlight><highlight class="stringliteral">&quot;Measure<sp/>has<sp/>bad<sp/>size&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Type_create_struct(n,<sp/>lengths.data(),<sp/>displacements,<sp/>types,<sp/>&amp;dt);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Type_commit(&amp;dt);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structatrip_1_1Slice_1_1mpi_1a320eaefea6f5238ac8f490ba85c9bdb0" kindref="member">vector</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structatrip_1_1Slice_1_1LocalDatabaseElement" kindref="compound">LocalDatabaseElement</ref>),<sp/>MPI_CHAR);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>write<sp/>tests<sp/>in<sp/>order<sp/>to<sp/>know<sp/>if<sp/>this<sp/>works</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dt;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal">};</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MPI<sp/>Types:1<sp/>ends<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[[file:../../atrip.org::*Static<sp/>utilities][Static<sp/>utilities:1]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233" refid="structatrip_1_1Slice_1a07166aae255c90bcbb117bf1e8e2fb56" refkind="member"><highlight class="normal"><ref refid="namespaceatrip_1a8b97b58a2469967c1a6da53511879c7b" kindref="member">PartialTuple</ref><sp/><ref refid="structatrip_1_1Slice_1a07166aae255c90bcbb117bf1e8e2fb56" kindref="member">subtupleBySlice</ref>(<ref refid="namespaceatrip_1a28915c100861c4b2a8c868a4b8f1f233" kindref="member">ABCTuple</ref><sp/>abc,<sp/><ref refid="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46" kindref="member">Type</ref><sp/>sliceType)<sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(sliceType)<sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46a95d8dd6c535cdf180d9b78fea1dabd2c" kindref="member">AB</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{abc[0],<sp/>abc[1]};</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46a56b6bbbe684c42ebf26bb91d68921b42" kindref="member">BC</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{abc[1],<sp/>abc[2]};</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46aed801e2742ba2af5a55804d6e0e7613e" kindref="member">AC</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{abc[0],<sp/>abc[2]};</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46a1781b62e2b19583ea840692812d17cea" kindref="member">CB</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{abc[2],<sp/>abc[1]};</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46a95b07e2180c2f7003f986104dfb85677" kindref="member">BA</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{abc[1],<sp/>abc[0]};</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46a5d98c0f033fde70dd1b2d48220a4726d" kindref="member">CA</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{abc[2],<sp/>abc[0]};</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><sp/><ref refid="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46ac37202de596dc7eb8a95a68a168750ba" kindref="member">A</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{abc[0],<sp/>0};</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><sp/><ref refid="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46ab0cc4fdf016372ae51b4b33f19970877" kindref="member">B</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{abc[1],<sp/>0};</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><sp/><ref refid="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46a4d34dab093e3bc7dc5a6afa466dfc7a3" kindref="member">C</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{abc[2],<sp/>0};</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Switch<sp/>statement<sp/>not<sp/>exhaustive!&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal">}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Static<sp/>utilities:1<sp/>ends<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[[file:../../atrip.org::*Static<sp/>utilities][Static<sp/>utilities:2]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250" refid="structatrip_1_1Slice_1a4920626f4572e699367835f9a4be18b2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;Slice&lt;F&gt;*&gt;<sp/><ref refid="structatrip_1_1Slice_1a4920626f4572e699367835f9a4be18b2" kindref="member">hasRecycledReferencingToIt</ref></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>(<sp/>std::vector&lt;<ref refid="structatrip_1_1Slice" kindref="compound">Slice&lt;F&gt;</ref>&gt;<sp/>&amp;slices</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>,<sp/><ref refid="structatrip_1_1Slice_1_1Info" kindref="compound">Info</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="structatrip_1_1Slice_1a5d20248fbeeed357af5abfa31c9f0d1b" kindref="member">info</ref></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>std::vector&lt;Slice&lt;F&gt;*&gt;<sp/>result;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>s:<sp/>slices)</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><sp/>s.info.recycling<sp/>==<sp/><ref refid="structatrip_1_1Slice_1a5d20248fbeeed357af5abfa31c9f0d1b" kindref="member">info</ref>.<ref refid="structatrip_1_1Slice_1_1Info_1a906b399e728a367f9c64cdb87ec53dc0" kindref="member">type</ref></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>s.info.tuple<sp/>==<sp/><ref refid="structatrip_1_1Slice_1a5d20248fbeeed357af5abfa31c9f0d1b" kindref="member">info</ref>.<ref refid="structatrip_1_1Slice_1_1Info_1aead2cf6df57d78d19df52bcde0ec2054" kindref="member">tuple</ref></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>s.info.state<sp/>==<sp/><ref refid="structatrip_1_1Slice_1ade9f7c874828268e1cc03d5da85734a0af916232db704e602917e8b38720e5863" kindref="member">Recycled</ref></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>result.push_back(&amp;s);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="263"><highlight class="normal">}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Static<sp/>utilities:2<sp/>ends<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[[file:../../atrip.org::*Static<sp/>utilities][Static<sp/>utilities:3]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267" refid="structatrip_1_1Slice_1a7aa07601e9f23db70b9e97f7bcb3d979" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structatrip_1_1Slice" kindref="compound">Slice&lt;F&gt;</ref>&amp;<sp/><ref refid="structatrip_1_1Slice_1a7aa07601e9f23db70b9e97f7bcb3d979" kindref="member">findOneByType</ref>(std::vector&lt;<ref refid="structatrip_1_1Slice" kindref="compound">Slice&lt;F&gt;</ref>&gt;<sp/>&amp;slices,<sp/><ref refid="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46" kindref="member">Slice&lt;F&gt;::Type</ref><sp/>type)<sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sliceIt</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>std::find_if(slices.begin(),<sp/>slices.end(),</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;type](<ref refid="structatrip_1_1Slice" kindref="compound">Slice&lt;F&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>type<sp/>==<sp/>s.info.type;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="Debug_8hpp_1ac0c1f2990209029f452a33e8ae2206cd" kindref="member">WITH_CRAZY_DEBUG</ref></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="Debug_8hpp_1a3f86e6b81edd7297ee6f9fd44cba3149" kindref="member">WITH_RANK</ref></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t__<sp/>looking<sp/>for<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>type<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sliceIt<sp/>==<sp/>slices.end())</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::domain_error(</highlight><highlight class="stringliteral">&quot;Slice<sp/>by<sp/>type<sp/>not<sp/>found!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*sliceIt;</highlight></codeline>
<codeline lineno="279"><highlight class="normal">}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Static<sp/>utilities:3<sp/>ends<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[[file:../../atrip.org::*Static<sp/>utilities][Static<sp/>utilities:4]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structatrip_1_1Slice" kindref="compound">Slice&lt;F&gt;</ref>&amp;</highlight></codeline>
<codeline lineno="284" refid="structatrip_1_1Slice_1a48b37b45f3c9c1bd7b74d0370354a12b" refkind="member"><highlight class="normal"><ref refid="structatrip_1_1Slice_1a48b37b45f3c9c1bd7b74d0370354a12b" kindref="member">findRecycledSource</ref><sp/>(std::vector&lt;<ref refid="structatrip_1_1Slice" kindref="compound">Slice&lt;F&gt;</ref>&gt;<sp/>&amp;slices,<sp/><ref refid="structatrip_1_1Slice_1_1Info" kindref="compound">Slice&lt;F&gt;::Info</ref><sp/><ref refid="structatrip_1_1Slice_1a5d20248fbeeed357af5abfa31c9f0d1b" kindref="member">info</ref>)<sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sliceIt</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>=<sp/>std::find_if(slices.begin(),<sp/>slices.end(),</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;<ref refid="structatrip_1_1Slice_1a5d20248fbeeed357af5abfa31c9f0d1b" kindref="member">info</ref>](<ref refid="structatrip_1_1Slice" kindref="compound">Slice&lt;F&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>info.recycling<sp/>==<sp/>s.info.type</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>info.tuple<sp/>==<sp/>s.info.tuple</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>State::Recycled<sp/>!=<sp/>s.info.state</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><ref refid="Debug_8hpp_1ac0c1f2990209029f452a33e8ae2206cd" kindref="member">WITH_CRAZY_DEBUG</ref></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><ref refid="Debug_8hpp_1a3f86e6b81edd7297ee6f9fd44cba3149" kindref="member">WITH_RANK</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;__slice__:find:<sp/>recycling<sp/>source<sp/>of<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/><ref refid="namespaceatrip_1a3178eea10b83bd01a95ca222be291c1f" kindref="member">pretty_print</ref>(<ref refid="structatrip_1_1Slice_1a5d20248fbeeed357af5abfa31c9f0d1b" kindref="member">info</ref>)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sliceIt<sp/>==<sp/>slices.end())</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::domain_error(<sp/></highlight><highlight class="stringliteral">&quot;Slice<sp/>not<sp/>found:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/><ref refid="namespaceatrip_1a3178eea10b83bd01a95ca222be291c1f" kindref="member">pretty_print</ref>(<ref refid="structatrip_1_1Slice_1a5d20248fbeeed357af5abfa31c9f0d1b" kindref="member">info</ref>)</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>rank:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/><ref refid="namespaceatrip_1a3178eea10b83bd01a95ca222be291c1f" kindref="member">pretty_print</ref>(<ref refid="structatrip_1_1Atrip_1a384ab5ffeacf4d84a5c614f6c0621a17" kindref="member">Atrip::rank</ref>)</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><ref refid="Debug_8hpp_1a3f86e6b81edd7297ee6f9fd44cba3149" kindref="member">WITH_RANK</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;__slice__:find:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="namespaceatrip_1a3178eea10b83bd01a95ca222be291c1f" kindref="member">pretty_print</ref>(sliceIt-&gt;info)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*sliceIt;</highlight></codeline>
<codeline lineno="305"><highlight class="normal">}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Static<sp/>utilities:4<sp/>ends<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[[file:../../atrip.org::*Static<sp/>utilities][Static<sp/>utilities:5]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309" refid="structatrip_1_1Slice_1ab57c0d9c391694a84abe5327cd5fa1b4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structatrip_1_1Slice" kindref="compound">Slice&lt;F&gt;</ref>&amp;<sp/><ref refid="structatrip_1_1Slice_1ab57c0d9c391694a84abe5327cd5fa1b4" kindref="member">findByTypeAbc</ref></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/>(<sp/>std::vector&lt;<ref refid="structatrip_1_1Slice" kindref="compound">Slice&lt;F&gt;</ref>&gt;<sp/>&amp;slices</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>,<sp/><ref refid="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46" kindref="member">Slice&lt;F&gt;::Type</ref><sp/>type</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/>,<sp/><ref refid="namespaceatrip_1a28915c100861c4b2a8c868a4b8f1f233" kindref="member">ABCTuple</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>abc</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tuple<sp/>=<sp/><ref refid="structatrip_1_1Slice_1a07166aae255c90bcbb117bf1e8e2fb56" kindref="member">Slice&lt;F&gt;::subtupleBySlice</ref>(abc,<sp/>type);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sliceIt</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>std::find_if(slices.begin(),<sp/>slices.end(),</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;type,<sp/>&amp;tuple](<ref refid="structatrip_1_1Slice" kindref="compound">Slice&lt;F&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>type<sp/>==<sp/>s.info.type</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>tuple<sp/>==<sp/>s.info.tuple</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="Debug_8hpp_1ac0c1f2990209029f452a33e8ae2206cd" kindref="member">WITH_CRAZY_DEBUG</ref></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="Debug_8hpp_1a3f86e6b81edd7297ee6f9fd44cba3149" kindref="member">WITH_RANK</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;__slice__:find:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>type<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>and<sp/>tuple<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/><ref refid="namespaceatrip_1a3178eea10b83bd01a95ca222be291c1f" kindref="member">pretty_print</ref>(tuple)</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sliceIt<sp/>==<sp/>slices.end())</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::domain_error(<sp/></highlight><highlight class="stringliteral">&quot;Slice<sp/>not<sp/>found:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/><ref refid="namespaceatrip_1a3178eea10b83bd01a95ca222be291c1f" kindref="member">pretty_print</ref>(tuple)</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/><ref refid="namespaceatrip_1a3178eea10b83bd01a95ca222be291c1f" kindref="member">pretty_print</ref>(type)</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>rank:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/><ref refid="namespaceatrip_1a3178eea10b83bd01a95ca222be291c1f" kindref="member">pretty_print</ref>(<ref refid="structatrip_1_1Atrip_1a384ab5ffeacf4d84a5c614f6c0621a17" kindref="member">Atrip::rank</ref>)</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*sliceIt;</highlight></codeline>
<codeline lineno="335"><highlight class="normal">}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Static<sp/>utilities:5<sp/>ends<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[[file:../../atrip.org::*Static<sp/>utilities][Static<sp/>utilities:6]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339" refid="structatrip_1_1Slice_1aac3a4c4281d2ff9e3c2a0060d3a5aa4a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structatrip_1_1Slice" kindref="compound">Slice&lt;F&gt;</ref>&amp;<sp/><ref refid="structatrip_1_1Slice_1aac3a4c4281d2ff9e3c2a0060d3a5aa4a" kindref="member">findByInfo</ref>(std::vector&lt;<ref refid="structatrip_1_1Slice" kindref="compound">Slice&lt;F&gt;</ref>&gt;<sp/>&amp;slices,</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structatrip_1_1Slice_1_1Info" kindref="compound">Slice&lt;F&gt;::Info</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="structatrip_1_1Slice_1a5d20248fbeeed357af5abfa31c9f0d1b" kindref="member">info</ref>)<sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sliceIt</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>=<sp/>std::find_if(slices.begin(),<sp/>slices.end(),</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;<ref refid="structatrip_1_1Slice_1a5d20248fbeeed357af5abfa31c9f0d1b" kindref="member">info</ref>](<ref refid="structatrip_1_1Slice" kindref="compound">Slice&lt;F&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>maybe<sp/>implement<sp/>comparison<sp/>in<sp/>Info<sp/>struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>info.type<sp/>==<sp/>s.info.type</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>info.state<sp/>==<sp/>s.info.state</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>info.tuple<sp/>==<sp/>s.info.tuple</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>info.from.rank<sp/>==<sp/>s.info.from.rank</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>info.from.source<sp/>==<sp/>s.info.from.source</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><ref refid="Debug_8hpp_1ac0c1f2990209029f452a33e8ae2206cd" kindref="member">WITH_CRAZY_DEBUG</ref></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><ref refid="Debug_8hpp_1a3f86e6b81edd7297ee6f9fd44cba3149" kindref="member">WITH_RANK</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;__slice__:find:looking<sp/>for<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="namespaceatrip_1a3178eea10b83bd01a95ca222be291c1f" kindref="member">pretty_print</ref>(<ref refid="structatrip_1_1Slice_1a5d20248fbeeed357af5abfa31c9f0d1b" kindref="member">info</ref>)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sliceIt<sp/>==<sp/>slices.end())</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::domain_error(<sp/></highlight><highlight class="stringliteral">&quot;Slice<sp/>by<sp/>info<sp/>not<sp/>found:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/><ref refid="namespaceatrip_1a3178eea10b83bd01a95ca222be291c1f" kindref="member">pretty_print</ref>(<ref refid="structatrip_1_1Slice_1a5d20248fbeeed357af5abfa31c9f0d1b" kindref="member">info</ref>));</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*sliceIt;</highlight></codeline>
<codeline lineno="358"><highlight class="normal">}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Static<sp/>utilities:6<sp/>ends<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[[file:../../atrip.org::*Attributes][Attributes:1]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362" refid="structatrip_1_1Slice_1a5d20248fbeeed357af5abfa31c9f0d1b" refkind="member"><highlight class="normal"><ref refid="structatrip_1_1Slice_1_1Info" kindref="compound">Info</ref><sp/><ref refid="structatrip_1_1Slice_1a5d20248fbeeed357af5abfa31c9f0d1b" kindref="member">info</ref>;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Attributes:1<sp/>ends<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[[file:../../atrip.org::*Attributes][Attributes:2]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366" refid="structatrip_1_1Slice_1ab0c99e8ec9e0c84611d7fdec14bdb6ee" refkind="member"><highlight class="normal">F<sp/><sp/>*<ref refid="structatrip_1_1Slice_1ab0c99e8ec9e0c84611d7fdec14bdb6ee" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Attributes:2<sp/>ends<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[[file:../../atrip.org::*Attributes][Attributes:3]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370" refid="structatrip_1_1Slice_1a0a10dbe08bdaca9682f640be8f8ae736" refkind="member"><highlight class="normal">MPI_Request<sp/><ref refid="structatrip_1_1Slice_1a0a10dbe08bdaca9682f640be8f8ae736" kindref="member">request</ref>;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Attributes:3<sp/>ends<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[[file:../../atrip.org::*Attributes][Attributes:4]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374" refid="structatrip_1_1Slice_1a7e16150ff4f60689556a1b9ca139a22d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structatrip_1_1Slice_1a7e16150ff4f60689556a1b9ca139a22d" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Attributes:4<sp/>ends<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[[file:../../atrip.org::*Member<sp/>functions][Member<sp/>functions:1]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378" refid="structatrip_1_1Slice_1aea2369215b927bc117bbad21e4aa2b35" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structatrip_1_1Slice_1aea2369215b927bc117bbad21e4aa2b35" kindref="member">markReady</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><ref refid="structatrip_1_1Slice_1a5d20248fbeeed357af5abfa31c9f0d1b" kindref="member">info</ref>.<ref refid="structatrip_1_1Slice_1_1Info_1a95ae928785594ad332204f3377cd241e" kindref="member">state</ref><sp/>=<sp/><ref refid="structatrip_1_1Slice_1ade9f7c874828268e1cc03d5da85734a0a08aec9b7b59e8a3ee12a965bf4d7afd9" kindref="member">Ready</ref>;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><ref refid="structatrip_1_1Slice_1a5d20248fbeeed357af5abfa31c9f0d1b" kindref="member">info</ref>.<ref refid="structatrip_1_1Slice_1_1Info_1a3ddb161e7d7f645840f671df30ac4888" kindref="member">recycling</ref><sp/>=<sp/><ref refid="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46ac32b5c11df3f14116f3fddf2bc10a55e" kindref="member">Blank</ref>;</highlight></codeline>
<codeline lineno="381"><highlight class="normal">}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Member<sp/>functions:1<sp/>ends<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[[file:../../atrip.org::*Member<sp/>functions][Member<sp/>functions:2]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385" refid="structatrip_1_1Slice_1ac87980ccdf02128fee5a3529e32ce346" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structatrip_1_1Slice_1ac87980ccdf02128fee5a3529e32ce346" kindref="member">isUnwrapped</ref>()<sp/>const<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structatrip_1_1Slice_1a5d20248fbeeed357af5abfa31c9f0d1b" kindref="member">info</ref>.<ref refid="structatrip_1_1Slice_1_1Info_1a95ae928785594ad332204f3377cd241e" kindref="member">state</ref><sp/>==<sp/><ref refid="structatrip_1_1Slice_1ade9f7c874828268e1cc03d5da85734a0a08aec9b7b59e8a3ee12a965bf4d7afd9" kindref="member">Ready</ref></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/><ref refid="structatrip_1_1Slice_1a5d20248fbeeed357af5abfa31c9f0d1b" kindref="member">info</ref>.<ref refid="structatrip_1_1Slice_1_1Info_1a95ae928785594ad332204f3377cd241e" kindref="member">state</ref><sp/>==<sp/><ref refid="structatrip_1_1Slice_1ade9f7c874828268e1cc03d5da85734a0a57a108e7e6561000ac9f7d9e9b9317b9" kindref="member">SelfSufficient</ref></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="389"><highlight class="normal">}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Member<sp/>functions:2<sp/>ends<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[[file:../../atrip.org::*Member<sp/>functions][Member<sp/>functions:3]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393" refid="structatrip_1_1Slice_1a47d5e4787f2a9f5122ee7efc27b2565d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structatrip_1_1Slice_1a47d5e4787f2a9f5122ee7efc27b2565d" kindref="member">isUnwrappable</ref>()<sp/>const<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structatrip_1_1Slice_1ac87980ccdf02128fee5a3529e32ce346" kindref="member">isUnwrapped</ref>()</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/><ref refid="structatrip_1_1Slice_1a5d20248fbeeed357af5abfa31c9f0d1b" kindref="member">info</ref>.<ref refid="structatrip_1_1Slice_1_1Info_1a95ae928785594ad332204f3377cd241e" kindref="member">state</ref><sp/>==<sp/><ref refid="structatrip_1_1Slice_1ade9f7c874828268e1cc03d5da85734a0af916232db704e602917e8b38720e5863" kindref="member">Recycled</ref></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/><ref refid="structatrip_1_1Slice_1a5d20248fbeeed357af5abfa31c9f0d1b" kindref="member">info</ref>.<ref refid="structatrip_1_1Slice_1_1Info_1a95ae928785594ad332204f3377cd241e" kindref="member">state</ref><sp/>==<sp/><ref refid="structatrip_1_1Slice_1ade9f7c874828268e1cc03d5da85734a0ae6d67fb1c5af3b568ab9ad22659ce152" kindref="member">Dispatched</ref></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="398"><highlight class="normal">}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400" refid="structatrip_1_1Slice_1adb64c4e0ccabba3313fdd82ac384ff12" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structatrip_1_1Slice_1adb64c4e0ccabba3313fdd82ac384ff12" kindref="member">isDirectlyFetchable</ref>()<sp/>const<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structatrip_1_1Slice_1a5d20248fbeeed357af5abfa31c9f0d1b" kindref="member">info</ref>.<ref refid="structatrip_1_1Slice_1_1Info_1a95ae928785594ad332204f3377cd241e" kindref="member">state</ref><sp/>==<sp/><ref refid="structatrip_1_1Slice_1ade9f7c874828268e1cc03d5da85734a0a08aec9b7b59e8a3ee12a965bf4d7afd9" kindref="member">Ready</ref><sp/>||<sp/><ref refid="structatrip_1_1Slice_1a5d20248fbeeed357af5abfa31c9f0d1b" kindref="member">info</ref>.<ref refid="structatrip_1_1Slice_1_1Info_1a95ae928785594ad332204f3377cd241e" kindref="member">state</ref><sp/>==<sp/><ref refid="structatrip_1_1Slice_1ade9f7c874828268e1cc03d5da85734a0ae6d67fb1c5af3b568ab9ad22659ce152" kindref="member">Dispatched</ref>;</highlight></codeline>
<codeline lineno="402"><highlight class="normal">}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404" refid="structatrip_1_1Slice_1a44cca23ee01b498d8b9b725555f31481" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structatrip_1_1Slice_1a44cca23ee01b498d8b9b725555f31481" kindref="member">free</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><ref refid="structatrip_1_1Slice_1a5d20248fbeeed357af5abfa31c9f0d1b" kindref="member">info</ref>.<ref refid="structatrip_1_1Slice_1_1Info_1aead2cf6df57d78d19df52bcde0ec2054" kindref="member">tuple</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>{0,<sp/>0};</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><ref refid="structatrip_1_1Slice_1a5d20248fbeeed357af5abfa31c9f0d1b" kindref="member">info</ref>.<ref refid="structatrip_1_1Slice_1_1Info_1a906b399e728a367f9c64cdb87ec53dc0" kindref="member">type</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46ac32b5c11df3f14116f3fddf2bc10a55e" kindref="member">Blank</ref>;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><ref refid="structatrip_1_1Slice_1a5d20248fbeeed357af5abfa31c9f0d1b" kindref="member">info</ref>.<ref refid="structatrip_1_1Slice_1_1Info_1a95ae928785594ad332204f3377cd241e" kindref="member">state</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="structatrip_1_1Slice_1ade9f7c874828268e1cc03d5da85734a0a37b0da7cf0ebee6184b29c2c212574e7" kindref="member">Acceptor</ref>;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><ref refid="structatrip_1_1Slice_1a5d20248fbeeed357af5abfa31c9f0d1b" kindref="member">info</ref>.<ref refid="structatrip_1_1Slice_1_1Info_1ab096637d74752ff7c072bc34812618b6" kindref="member">from</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>{0,<sp/>0};</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><ref refid="structatrip_1_1Slice_1a5d20248fbeeed357af5abfa31c9f0d1b" kindref="member">info</ref>.<ref refid="structatrip_1_1Slice_1_1Info_1a3ddb161e7d7f645840f671df30ac4888" kindref="member">recycling</ref><sp/><sp/>=<sp/><ref refid="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46ac32b5c11df3f14116f3fddf2bc10a55e" kindref="member">Blank</ref>;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><ref refid="structatrip_1_1Slice_1ab0c99e8ec9e0c84611d7fdec14bdb6ee" kindref="member">data</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="411"><highlight class="normal">}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413" refid="structatrip_1_1Slice_1a0d405ac787aa47dc3ccb457ffaa6c839" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structatrip_1_1Slice_1a0d405ac787aa47dc3ccb457ffaa6c839" kindref="member">isFree</ref>()<sp/>const<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structatrip_1_1Slice_1a5d20248fbeeed357af5abfa31c9f0d1b" kindref="member">info</ref>.<ref refid="structatrip_1_1Slice_1_1Info_1aead2cf6df57d78d19df52bcde0ec2054" kindref="member">tuple</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>==<sp/><ref refid="namespaceatrip_1a8b97b58a2469967c1a6da53511879c7b" kindref="member">PartialTuple</ref>{0,<sp/>0}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/><ref refid="structatrip_1_1Slice_1a5d20248fbeeed357af5abfa31c9f0d1b" kindref="member">info</ref>.<ref refid="structatrip_1_1Slice_1_1Info_1a906b399e728a367f9c64cdb87ec53dc0" kindref="member">type</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>==<sp/><ref refid="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46ac32b5c11df3f14116f3fddf2bc10a55e" kindref="member">Blank</ref></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/><ref refid="structatrip_1_1Slice_1a5d20248fbeeed357af5abfa31c9f0d1b" kindref="member">info</ref>.<ref refid="structatrip_1_1Slice_1_1Info_1a95ae928785594ad332204f3377cd241e" kindref="member">state</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>==<sp/><ref refid="structatrip_1_1Slice_1ade9f7c874828268e1cc03d5da85734a0a37b0da7cf0ebee6184b29c2c212574e7" kindref="member">Acceptor</ref></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/><ref refid="structatrip_1_1Slice_1a5d20248fbeeed357af5abfa31c9f0d1b" kindref="member">info</ref>.<ref refid="structatrip_1_1Slice_1_1Info_1ab096637d74752ff7c072bc34812618b6" kindref="member">from</ref>.<ref refid="structatrip_1_1Slice_1_1Location_1adafd6595edf2739cd0a2a31eb1bf57e6" kindref="member">rank</ref><sp/><sp/><sp/>==<sp/>0</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/><ref refid="structatrip_1_1Slice_1a5d20248fbeeed357af5abfa31c9f0d1b" kindref="member">info</ref>.<ref refid="structatrip_1_1Slice_1_1Info_1ab096637d74752ff7c072bc34812618b6" kindref="member">from</ref>.<ref refid="structatrip_1_1Slice_1_1Location_1a4ae8c64c9ef47d9ebebd04598b1bb35f" kindref="member">source</ref><sp/>==<sp/>0</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/><ref refid="structatrip_1_1Slice_1a5d20248fbeeed357af5abfa31c9f0d1b" kindref="member">info</ref>.<ref refid="structatrip_1_1Slice_1_1Info_1a3ddb161e7d7f645840f671df30ac4888" kindref="member">recycling</ref><sp/><sp/><sp/>==<sp/><ref refid="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46ac32b5c11df3f14116f3fddf2bc10a55e" kindref="member">Blank</ref></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/><ref refid="structatrip_1_1Slice_1ab0c99e8ec9e0c84611d7fdec14bdb6ee" kindref="member">data</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>==<sp/>nullptr</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="422"><highlight class="normal">}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Member<sp/>functions:3<sp/>ends<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[[file:../../atrip.org::*Member<sp/>functions][Member<sp/>functions:4]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426" refid="structatrip_1_1Slice_1acf78d7a1f3cdf125c05ff5007c52232f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structatrip_1_1Slice_1acf78d7a1f3cdf125c05ff5007c52232f" kindref="member">isRecyclable</ref>()<sp/>const<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/><sp/><ref refid="structatrip_1_1Slice_1a5d20248fbeeed357af5abfa31c9f0d1b" kindref="member">info</ref>.<ref refid="structatrip_1_1Slice_1_1Info_1a95ae928785594ad332204f3377cd241e" kindref="member">state</ref><sp/>==<sp/><ref refid="structatrip_1_1Slice_1ade9f7c874828268e1cc03d5da85734a0ae6d67fb1c5af3b568ab9ad22659ce152" kindref="member">Dispatched</ref></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/><ref refid="structatrip_1_1Slice_1a5d20248fbeeed357af5abfa31c9f0d1b" kindref="member">info</ref>.<ref refid="structatrip_1_1Slice_1_1Info_1a95ae928785594ad332204f3377cd241e" kindref="member">state</ref><sp/>==<sp/><ref refid="structatrip_1_1Slice_1ade9f7c874828268e1cc03d5da85734a0a08aec9b7b59e8a3ee12a965bf4d7afd9" kindref="member">Ready</ref></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/><ref refid="structatrip_1_1Slice_1a5d20248fbeeed357af5abfa31c9f0d1b" kindref="member">info</ref>.<ref refid="structatrip_1_1Slice_1_1Info_1a95ae928785594ad332204f3377cd241e" kindref="member">state</ref><sp/>==<sp/><ref refid="structatrip_1_1Slice_1ade9f7c874828268e1cc03d5da85734a0a5651eced6ec56a1720f3e315c7fad891" kindref="member">Fetch</ref></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/><ref refid="structatrip_1_1Slice_1ae9851d6c9cbae126484ad37b2446408c" kindref="member">hasValidDataPointer</ref>()</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="433"><highlight class="normal">}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Member<sp/>functions:4<sp/>ends<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[[file:../../atrip.org::*Member<sp/>functions][Member<sp/>functions:5]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437" refid="structatrip_1_1Slice_1ae9851d6c9cbae126484ad37b2446408c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structatrip_1_1Slice_1ae9851d6c9cbae126484ad37b2446408c" kindref="member">hasValidDataPointer</ref>()<sp/>const<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structatrip_1_1Slice_1ab0c99e8ec9e0c84611d7fdec14bdb6ee" kindref="member">data</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/><ref refid="structatrip_1_1Slice_1a5d20248fbeeed357af5abfa31c9f0d1b" kindref="member">info</ref>.<ref refid="structatrip_1_1Slice_1_1Info_1a95ae928785594ad332204f3377cd241e" kindref="member">state</ref><sp/>!=<sp/><ref refid="structatrip_1_1Slice_1ade9f7c874828268e1cc03d5da85734a0a37b0da7cf0ebee6184b29c2c212574e7" kindref="member">Acceptor</ref></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/><ref refid="structatrip_1_1Slice_1a5d20248fbeeed357af5abfa31c9f0d1b" kindref="member">info</ref>.<ref refid="structatrip_1_1Slice_1_1Info_1a906b399e728a367f9c64cdb87ec53dc0" kindref="member">type</ref><sp/><sp/>!=<sp/><ref refid="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46ac32b5c11df3f14116f3fddf2bc10a55e" kindref="member">Blank</ref></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="442"><highlight class="normal">}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Member<sp/>functions:5<sp/>ends<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[[file:../../atrip.org::*Member<sp/>functions][Member<sp/>functions:6]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446" refid="structatrip_1_1Slice_1ad9e60cbb9fe27fdd22edaf94dd46fa5e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structatrip_1_1Slice_1ad9e60cbb9fe27fdd22edaf94dd46fa5e" kindref="member">unwrapAndMarkReady</ref>()<sp/>{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structatrip_1_1Slice_1a5d20248fbeeed357af5abfa31c9f0d1b" kindref="member">info</ref>.<ref refid="structatrip_1_1Slice_1_1Info_1a95ae928785594ad332204f3377cd241e" kindref="member">state</ref><sp/>==<sp/><ref refid="structatrip_1_1Slice_1ade9f7c874828268e1cc03d5da85734a0a08aec9b7b59e8a3ee12a965bf4d7afd9" kindref="member">Ready</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structatrip_1_1Slice_1a5d20248fbeeed357af5abfa31c9f0d1b" kindref="member">info</ref>.<ref refid="structatrip_1_1Slice_1_1Info_1a95ae928785594ad332204f3377cd241e" kindref="member">state</ref><sp/>!=<sp/><ref refid="structatrip_1_1Slice_1ade9f7c874828268e1cc03d5da85734a0ae6d67fb1c5af3b568ab9ad22659ce152" kindref="member">Dispatched</ref>)</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::domain_error(</highlight><highlight class="stringliteral">&quot;Can&apos;t<sp/>unwrap<sp/>a<sp/>non-ready,<sp/>non-dispatched<sp/>slice!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structatrip_1_1Slice_1aea2369215b927bc117bbad21e4aa2b35" kindref="member">markReady</ref>();</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MPI_Status<sp/>status;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_OCD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="Debug_8hpp_1a3f86e6b81edd7297ee6f9fd44cba3149" kindref="member">WITH_RANK</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;__slice__:mpi:<sp/>waiting<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>errorCode<sp/>=<sp/>MPI_Wait(&amp;<ref refid="structatrip_1_1Slice_1a0a10dbe08bdaca9682f640be8f8ae736" kindref="member">request</ref>,<sp/>&amp;status);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(errorCode<sp/>!=<sp/>MPI_SUCCESS)</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;MPI<sp/>ERROR<sp/>HAPPENED....&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_OCD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>errorString[MPI_MAX_ERROR_STRING];</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>errorSize;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MPI_Error_string(errorCode,<sp/>errorString,<sp/>&amp;errorSize);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="Debug_8hpp_1a3f86e6b81edd7297ee6f9fd44cba3149" kindref="member">WITH_RANK</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;__slice__:mpi:<sp/>status<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;{<sp/>.source=&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>status.MPI_SOURCE</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>.tag=&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>status.MPI_TAG</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>.error=&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>status.MPI_ERROR</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>.errCode=&quot;</highlight><highlight class="normal"><sp/><sp/><sp/>&lt;&lt;<sp/>errorCode</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>.err=&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>errorString</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>}&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Member<sp/>functions:6<sp/>ends<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[[file:../../atrip.org::*Epilog][Epilog:1]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478" refid="structatrip_1_1Slice_1a00a827ca8fcc5c1caa383b2798e10e5c" refkind="member"><highlight class="normal"><ref refid="structatrip_1_1Slice_1a00a827ca8fcc5c1caa383b2798e10e5c" kindref="member">Slice</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size_)</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="structatrip_1_1Slice_1a5d20248fbeeed357af5abfa31c9f0d1b" kindref="member">info</ref>({})</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><ref refid="structatrip_1_1Slice_1ab0c99e8ec9e0c84611d7fdec14bdb6ee" kindref="member">data</ref>(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><ref refid="structatrip_1_1Slice_1a7e16150ff4f60689556a1b9ca139a22d" kindref="member">size</ref>(size_)</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal">};<sp/></highlight><highlight class="comment">//<sp/>struct<sp/>Slice</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Epilog:1<sp/>ends<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[[file:../../atrip.org::*Debug][Debug:1]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F=</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="490" refid="namespaceatrip_1a36ea310b3a29e6d68402251cedf5e542" refkind="member"><highlight class="normal">std::ostream&amp;<sp/><ref refid="namespaceatrip_1a36ea310b3a29e6d68402251cedf5e542" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>out,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structatrip_1_1Slice_1_1Location" kindref="compound">Slice&lt;F&gt;::Location</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>remove<sp/>me</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;{.r(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v.<ref refid="structatrip_1_1Slice_1_1Location_1adafd6595edf2739cd0a2a31eb1bf57e6" kindref="member">rank</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;),<sp/>.s(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v.<ref refid="structatrip_1_1Slice_1_1Location_1a4ae8c64c9ef47d9ebebd04598b1bb35f" kindref="member">source</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)};&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="494"><highlight class="normal">}</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F=</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="497" refid="namespaceatrip_1a425e1a9ba33666dec82fd4575664a48f" refkind="member"><highlight class="normal">std::ostream&amp;<sp/><ref refid="namespaceatrip_1a36ea310b3a29e6d68402251cedf5e542" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>out,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structatrip_1_1Slice_1_1Info" kindref="compound">Slice&lt;F&gt;::Info</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;«t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i.<ref refid="structatrip_1_1Slice_1_1Info_1a906b399e728a367f9c64cdb87ec53dc0" kindref="member">type</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>s&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i.<ref refid="structatrip_1_1Slice_1_1Info_1a95ae928785594ad332204f3377cd241e" kindref="member">state</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;»&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>⊙<sp/>{&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i.<ref refid="structatrip_1_1Slice_1_1Info_1ab096637d74752ff7c072bc34812618b6" kindref="member">from</ref>.<ref refid="structatrip_1_1Slice_1_1Location_1adafd6595edf2739cd0a2a31eb1bf57e6" kindref="member">rank</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i.<ref refid="structatrip_1_1Slice_1_1Info_1ab096637d74752ff7c072bc34812618b6" kindref="member">from</ref>.<ref refid="structatrip_1_1Slice_1_1Location_1a4ae8c64c9ef47d9ebebd04598b1bb35f" kindref="member">source</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;}&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>∴<sp/>{&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i.<ref refid="structatrip_1_1Slice_1_1Info_1aead2cf6df57d78d19df52bcde0ec2054" kindref="member">tuple</ref>[0]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i.<ref refid="structatrip_1_1Slice_1_1Info_1aead2cf6df57d78d19df52bcde0ec2054" kindref="member">tuple</ref>[1]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;}&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>♲t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i.<ref refid="structatrip_1_1Slice_1_1Info_1a3ddb161e7d7f645840f671df30ac4888" kindref="member">recycling</ref></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="504"><highlight class="normal">}</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>atrip</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Debug:1<sp/>ends<sp/>here</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/atrip/atrip/include/atrip/Slice.hpp"/>
  </compounddef>
</doxygen>
