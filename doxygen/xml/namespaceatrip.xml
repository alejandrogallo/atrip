<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="namespaceatrip" kind="namespace" language="C++">
    <compoundname>atrip</compoundname>
    <innerclass refid="structatrip_1_1ABHH" prot="public">atrip::ABHH</innerclass>
    <innerclass refid="structatrip_1_1ABPH" prot="public">atrip::ABPH</innerclass>
    <innerclass refid="structatrip_1_1Atrip" prot="public">atrip::Atrip</innerclass>
    <innerclass refid="structatrip_1_1Checkpoint" prot="public">atrip::Checkpoint</innerclass>
    <innerclass refid="structatrip_1_1ClusterInfo" prot="public">atrip::ClusterInfo</innerclass>
    <innerclass refid="structatrip_1_1DataField" prot="public">atrip::DataField</innerclass>
    <innerclass refid="structatrip_1_1DataField_3_01Complex_01_4" prot="public">atrip::DataField&lt; Complex &gt;</innerclass>
    <innerclass refid="structatrip_1_1DataField_3_01double_01_4" prot="public">atrip::DataField&lt; double &gt;</innerclass>
    <innerclass refid="structatrip_1_1HHHA" prot="public">atrip::HHHA</innerclass>
    <innerclass refid="structatrip_1_1IterationDescription" prot="public">atrip::IterationDescription</innerclass>
    <innerclass refid="structatrip_1_1NaiveDistribution" prot="public">atrip::NaiveDistribution</innerclass>
    <innerclass refid="structatrip_1_1RankInfo" prot="public">atrip::RankInfo</innerclass>
    <innerclass refid="structatrip_1_1RankMap" prot="public">atrip::RankMap</innerclass>
    <innerclass refid="structatrip_1_1reorder__proxy" prot="public">atrip::reorder_proxy</innerclass>
    <innerclass refid="structatrip_1_1Slice" prot="public">atrip::Slice</innerclass>
    <innerclass refid="classatrip_1_1SliceUnion" prot="public">atrip::SliceUnion</innerclass>
    <innerclass refid="structatrip_1_1TABHH" prot="public">atrip::TABHH</innerclass>
    <innerclass refid="structatrip_1_1TAPHH" prot="public">atrip::TAPHH</innerclass>
    <innerclass refid="structatrip_1_1Timer" prot="public">atrip::Timer</innerclass>
    <innerclass refid="structatrip_1_1TuplesDistribution" prot="public">atrip::TuplesDistribution</innerclass>
    <innernamespace refid="namespaceatrip_1_1group__and__sort">atrip::group_and_sort</innernamespace>
    <innernamespace refid="namespaceatrip_1_1traits">atrip::traits</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespaceatrip_1a75f77db93d0a312ab4b85fbe7c5918b5" prot="public" static="no" strong="no">
        <type></type>
        <name>reordering_t</name>
        <qualifiedname>atrip::reordering_t</qualifiedname>
        <enumvalue id="namespaceatrip_1a75f77db93d0a312ab4b85fbe7c5918b5a546afa311eeed473d1c3e187a7b41e03" prot="public">
          <name>IJK</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceatrip_1a75f77db93d0a312ab4b85fbe7c5918b5a2f84610a3867d339bbb19a0a8eaa0323" prot="public">
          <name>IKJ</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceatrip_1a75f77db93d0a312ab4b85fbe7c5918b5a0fb4b6399f2c8b22831e65d724a49f14" prot="public">
          <name>JIK</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceatrip_1a75f77db93d0a312ab4b85fbe7c5918b5a510d5095978f19d76fd794f139284023" prot="public">
          <name>JKI</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceatrip_1a75f77db93d0a312ab4b85fbe7c5918b5a6b9d43d299dd901c3252c7ac566888ed" prot="public">
          <name>KIJ</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceatrip_1a75f77db93d0a312ab4b85fbe7c5918b5aa395a635cdba9cce51189474f7759680" prot="public">
          <name>KJI</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/src/atrip/Equations.cxx" line="144" column="3" bodyfile="/home/runner/work/atrip/atrip/src/atrip/Equations.cxx" bodystart="145" bodyend="152"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespaceatrip_1aa4158a2e7e79c518dcb11d7ccfc1c82f" prot="public" static="no">
        <type>std::complex&lt; double &gt;</type>
        <definition>using atrip::Complex = typedef std::complex&lt;double&gt;</definition>
        <argsstring></argsstring>
        <name>Complex</name>
        <qualifiedname>atrip::Complex</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Complex.hpp" line="27" column="3" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Complex.hpp" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceatrip_1af4afd47789d6e8e39ce3886578386d6d" prot="public" static="no">
        <type>std::function&lt; void(<ref refid="structatrip_1_1IterationDescription" kindref="compound">IterationDescription</ref> const  &amp;)&gt;</type>
        <definition>using atrip::IterationDescriptor = typedef std::function&lt;void(IterationDescription const&amp;)&gt;</definition>
        <argsstring></argsstring>
        <name>IterationDescriptor</name>
        <qualifiedname>atrip::IterationDescriptor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Debug.hpp" line="94" column="3" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Debug.hpp" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceatrip_1af838c7ed7996be477f99aad86114f26b" prot="public" static="no">
        <type>std::array&lt; size_t, 3 &gt;</type>
        <definition>typedef std::array&lt; size_t, 3 &gt; atrip::ABCTuple</definition>
        <argsstring></argsstring>
        <name>ABCTuple</name>
        <qualifiedname>atrip::ABCTuple</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Equations.hpp" line="28" column="1" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Equations.hpp" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceatrip_1a3b418cf6a27d7f12bcb3b8e42252ad35" prot="public" static="no">
        <type>std::array&lt; size_t, 2 &gt;</type>
        <definition>typedef std::array&lt; size_t, 2 &gt; atrip::PartialTuple</definition>
        <argsstring></argsstring>
        <name>PartialTuple</name>
        <qualifiedname>atrip::PartialTuple</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Equations.hpp" line="29" column="1" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Equations.hpp" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceatrip_1a574f187428c0e46270abd5331fdd729a" prot="public" static="no">
        <type>std::vector&lt; <ref refid="namespaceatrip_1af838c7ed7996be477f99aad86114f26b" kindref="member">ABCTuple</ref> &gt;</type>
        <definition>typedef std::vector&lt; ABCTuple &gt; atrip::ABCTuples</definition>
        <argsstring></argsstring>
        <name>ABCTuples</name>
        <qualifiedname>atrip::ABCTuples</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Equations.hpp" line="30" column="1" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Equations.hpp" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceatrip_1a58948ccd67c60d4ec8ae0058af5ac658" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>F *</type>
        <definition>using atrip::DataPtr = typedef F*</definition>
        <argsstring></argsstring>
        <name>DataPtr</name>
        <qualifiedname>atrip::DataPtr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Types.hpp" line="45" column="1" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Types.hpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceatrip_1a01ed999c96d78ffcac1a0ac0258ae07b" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structatrip_1_1DataField" kindref="compound">DataField</ref>&lt; F &gt;::type</type>
        <definition>using atrip::DataFieldType = typedef typename DataField&lt;F&gt;::type</definition>
        <argsstring></argsstring>
        <name>DataFieldType</name>
        <qualifiedname>atrip::DataFieldType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Types.hpp" line="57" column="1" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Types.hpp" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceatrip_1aec2fd4244568d19e92eb8d89425f1376" prot="public" static="no">
        <type>std::map&lt; std::string, <ref refid="structatrip_1_1Timer" kindref="compound">Timer</ref> &gt;</type>
        <definition>using atrip::Timings = typedef std::map&lt;std::string, Timer&gt;</definition>
        <argsstring></argsstring>
        <name>Timings</name>
        <qualifiedname>atrip::Timings</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Utils.hpp" line="80" column="1" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Utils.hpp" bodystart="80" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespaceatrip_1ac382a0e309a4bd41a81731bbaf8839bd" prot="public" static="no" mutable="no">
        <type>size_t const</type>
        <definition>size_t const atrip::No</definition>
        <argsstring></argsstring>
        <name>No</name>
        <qualifiedname>atrip::No</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/src/atrip/Equations.cxx" line="188" column="17" bodyfile="/home/runner/work/atrip/atrip/src/atrip/Equations.cxx" bodystart="189" bodyend="-1"/>
        <referencedby refid="namespaceatrip_1ab1387203a9c668ad0980a5288a3fe97d" compoundref="Equations_8cxx" startline="412" endline="723">doublesContribution</referencedby>
        <referencedby refid="namespaceatrip_1a0b2fa57a463a73c9389aa67e4961122a" compoundref="Equations_8cxx" startline="195" endline="245">for</referencedby>
        <referencedby refid="namespaceatrip_1aec9dfa406423eb145e2399183b941ca5" compoundref="Equations_8cxx" startline="252" endline="299">getEnergySame</referencedby>
        <referencedby refid="structatrip_1_1Atrip_1ac414d43de30968cc92a6f7a44e5cd9b6" compoundref="Atrip_8cxx" startline="55" endline="811">atrip::Atrip::run</referencedby>
        <referencedby refid="namespaceatrip_1a40dd04592c08dab33973a8255d270857" compoundref="Equations_8cxx" startline="345" endline="378">singlesContribution</referencedby>
        <referencedby refid="structatrip_1_1TAPHH_1a4456102eedd76dd1aa09adc66b2882c6" compoundref="Unions_8hpp" startline="79" endline="92">atrip::TAPHH&lt; F &gt;::sliceIntoBuffer</referencedby>
        <referencedby refid="structatrip_1_1HHHA_1aa1e0d1b558a5f2683742262857c72072" compoundref="Unions_8hpp" startline="116" endline="128">atrip::HHHA&lt; F &gt;::sliceIntoBuffer</referencedby>
        <referencedby refid="structatrip_1_1ABPH_1adfbf9bb767c29498ca52ef495e8d5a9e" compoundref="Unions_8hpp" startline="152" endline="167">atrip::ABPH&lt; F &gt;::sliceIntoBuffer</referencedby>
        <referencedby refid="structatrip_1_1ABHH_1ac862567131b2bcc5b7a4c46e2acb4a89" compoundref="Unions_8hpp" startline="190" endline="205">atrip::ABHH&lt; F &gt;::sliceIntoBuffer</referencedby>
        <referencedby refid="structatrip_1_1TABHH_1ac72a79ea1fa38bbd1e5a459e9b795eb9" compoundref="Unions_8hpp" startline="229" endline="245">atrip::TABHH&lt; F &gt;::sliceIntoBuffer</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespaceatrip_1a3d1858f73f742a66de6531bec311554c" prot="public" static="no" mutable="no">
        <type>size_t const F *const</type>
        <definition>size_t const F* const atrip::epsi</definition>
        <argsstring></argsstring>
        <name>epsi</name>
        <qualifiedname>atrip::epsi</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/src/atrip/Equations.cxx" line="189" column="12" bodyfile="/home/runner/work/atrip/atrip/src/atrip/Equations.cxx" bodystart="190" bodyend="-1"/>
        <referencedby refid="namespaceatrip_1a0b2fa57a463a73c9389aa67e4961122a" compoundref="Equations_8cxx" startline="195" endline="245">for</referencedby>
        <referencedby refid="namespaceatrip_1aec9dfa406423eb145e2399183b941ca5" compoundref="Equations_8cxx" startline="252" endline="299">getEnergySame</referencedby>
        <referencedby refid="structatrip_1_1Atrip_1ac414d43de30968cc92a6f7a44e5cd9b6" compoundref="Atrip_8cxx" startline="55" endline="811">atrip::Atrip::run</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespaceatrip_1a42b933930dd992983f0b748d33361417" prot="public" static="no" mutable="no">
        <type>size_t const F *const F *const</type>
        <definition>size_t const F* const F* const atrip::Tijk</definition>
        <argsstring></argsstring>
        <name>Tijk</name>
        <qualifiedname>atrip::Tijk</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/src/atrip/Equations.cxx" line="190" column="12" bodyfile="/home/runner/work/atrip/atrip/src/atrip/Equations.cxx" bodystart="191" bodyend="-1"/>
        <referencedby refid="namespaceatrip_1ab1387203a9c668ad0980a5288a3fe97d" compoundref="Equations_8cxx" startline="412" endline="723">doublesContribution</referencedby>
        <referencedby refid="namespaceatrip_1a0b2fa57a463a73c9389aa67e4961122a" compoundref="Equations_8cxx" startline="195" endline="245">for</referencedby>
        <referencedby refid="namespaceatrip_1aec9dfa406423eb145e2399183b941ca5" compoundref="Equations_8cxx" startline="252" endline="299">getEnergySame</referencedby>
        <referencedby refid="structatrip_1_1Atrip_1ac414d43de30968cc92a6f7a44e5cd9b6" compoundref="Atrip_8cxx" startline="55" endline="811">atrip::Atrip::run</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespaceatrip_1a96d51119991f52c17210d4bd93df27b2" prot="public" static="no" mutable="no">
        <type>size_t const F *const F *const F *const</type>
        <definition>size_t const F* const F* const F* const atrip::Zijk</definition>
        <argsstring></argsstring>
        <name>Zijk</name>
        <qualifiedname>atrip::Zijk</qualifiedname>
        <initializer>{
  constexpr size_t blockSize=16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/src/atrip/Equations.cxx" line="191" column="12" bodyfile="/home/runner/work/atrip/atrip/src/atrip/Equations.cxx" bodystart="192" bodyend="-1"/>
        <referencedby refid="namespaceatrip_1a0b2fa57a463a73c9389aa67e4961122a" compoundref="Equations_8cxx" startline="195" endline="245">for</referencedby>
        <referencedby refid="namespaceatrip_1aec9dfa406423eb145e2399183b941ca5" compoundref="Equations_8cxx" startline="252" endline="299">getEnergySame</referencedby>
        <referencedby refid="structatrip_1_1Atrip_1ac414d43de30968cc92a6f7a44e5cd9b6" compoundref="Atrip_8cxx" startline="55" endline="811">atrip::Atrip::run</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespaceatrip_1a341e9614e55178a8e9537898f42ac636" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="namespaceatrip_1af838c7ed7996be477f99aad86114f26b" kindref="member">ABCTuple</ref></type>
        <definition>constexpr ABCTuple atrip::FAKE_TUPLE</definition>
        <argsstring></argsstring>
        <name>FAKE_TUPLE</name>
        <qualifiedname>atrip::FAKE_TUPLE</qualifiedname>
        <initializer>= {0, 0, 0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Tuples.hpp" line="43" column="20" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Tuples.hpp" bodystart="43" bodyend="-1"/>
        <referencedby refid="namespaceatrip_1a6d24cef8b67603413dfae0002a083b95" compoundref="Tuples_8hpp" startline="158" endline="188">getTuplesList</referencedby>
        <referencedby refid="namespaceatrip_1_1group__and__sort_1a4e0708f21a913d72d93cc5feb5bd9328" compoundref="Tuples_8hpp" startline="430" endline="536">atrip::group_and_sort::main</referencedby>
        <referencedby refid="structatrip_1_1TuplesDistribution_1a0767a603e2865fef7d6a8cc9bf41c52a" compoundref="Tuples_8hpp" startline="50" endline="50">atrip::TuplesDistribution::tupleIsFake</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespaceatrip_1a4eb1a1b9186ce3cd1fae39cd044aaf29" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="namespaceatrip_1af838c7ed7996be477f99aad86114f26b" kindref="member">ABCTuple</ref></type>
        <definition>constexpr ABCTuple atrip::INVALID_TUPLE</definition>
        <argsstring></argsstring>
        <name>INVALID_TUPLE</name>
        <qualifiedname>atrip::INVALID_TUPLE</qualifiedname>
        <initializer>= {1, 1, 1}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Tuples.hpp" line="44" column="20" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Tuples.hpp" bodystart="44" bodyend="-1"/>
        <referencedby refid="namespaceatrip_1_1group__and__sort_1a9285b4e63c38f7c586f8ba185e5fa2e9" compoundref="Tuples_8hpp" startline="248" endline="426">atrip::group_and_sort::specialDistribution</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceatrip_1ae0be26b9684b07e88f48676188f0347a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void atrip::xgemm&lt; double &gt;</definition>
        <argsstring>(const char *transa, const char *transb, const int *m, const int *n, const int *k, double *alpha, const typename DataField&lt; double &gt;::type *A, const int *lda, const typename DataField&lt; double &gt;::type *B, const int *ldb, double *beta, typename DataField&lt; double &gt;::type *C, const int *ldc)</argsstring>
        <name>xgemm&lt; double &gt;</name>
        <qualifiedname>atrip::xgemm&lt; double &gt;</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>transa</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>transb</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>k</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const typename <ref refid="structatrip_1_1DataField" kindref="compound">DataField</ref>&lt; double &gt;::type *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>lda</declname>
        </param>
        <param>
          <type>const typename <ref refid="structatrip_1_1DataField" kindref="compound">DataField</ref>&lt; double &gt;::type *</type>
          <declname>B</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>ldb</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>typename <ref refid="structatrip_1_1DataField" kindref="compound">DataField</ref>&lt; double &gt;::type *</type>
          <declname>C</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>ldc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/src/atrip/Blas.cxx" line="41" column="3" bodyfile="/home/runner/work/atrip/atrip/src/atrip/Blas.cxx" bodystart="41" bodyend="79"/>
        <references refid="namespaceatrip_1a302b648f916e8ad102dd42072cca699f">dgemm_</references>
        <references refid="structatrip_1_1Atrip_1a551003e8a101a98960032754ed4fd6ad" compoundref="Atrip_8hpp" startline="44">atrip::Atrip::rank</references>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1a45054368aa6a5885bd17f62391ffaf18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void atrip::xgemm&lt; Complex &gt;</definition>
        <argsstring>(const char *transa, const char *transb, const int *m, const int *n, const int *k, Complex *alpha, const typename DataField&lt; Complex &gt;::type *A, const int *lda, const typename DataField&lt; Complex &gt;::type *B, const int *ldb, Complex *beta, typename DataField&lt; Complex &gt;::type *C, const int *ldc)</argsstring>
        <name>xgemm&lt; Complex &gt;</name>
        <qualifiedname>atrip::xgemm&lt; Complex &gt;</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>transa</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>transb</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1aa4158a2e7e79c518dcb11d7ccfc1c82f" kindref="member">Complex</ref> *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const typename <ref refid="structatrip_1_1DataField" kindref="compound">DataField</ref>&lt; <ref refid="namespaceatrip_1aa4158a2e7e79c518dcb11d7ccfc1c82f" kindref="member">Complex</ref> &gt;::type *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>lda</declname>
        </param>
        <param>
          <type>const typename <ref refid="structatrip_1_1DataField" kindref="compound">DataField</ref>&lt; <ref refid="namespaceatrip_1aa4158a2e7e79c518dcb11d7ccfc1c82f" kindref="member">Complex</ref> &gt;::type *</type>
          <declname>B</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>ldb</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1aa4158a2e7e79c518dcb11d7ccfc1c82f" kindref="member">Complex</ref> *</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>typename <ref refid="structatrip_1_1DataField" kindref="compound">DataField</ref>&lt; <ref refid="namespaceatrip_1aa4158a2e7e79c518dcb11d7ccfc1c82f" kindref="member">Complex</ref> &gt;::type *</type>
          <declname>C</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>ldc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/src/atrip/Blas.cxx" line="82" column="3" bodyfile="/home/runner/work/atrip/atrip/src/atrip/Blas.cxx" bodystart="82" bodyend="117"/>
        <references refid="CUDA_8hpp_1afe5c45d5511dca8939dbba25a99b98d2" compoundref="CUDA_8hpp" startline="33">_CHECK_CUBLAS_SUCCESS</references>
        <references refid="namespaceatrip_1a7dbace53db67d2fe7117fd8d401a714a">zgemm_</references>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1ac85e8ff32c2d5e26b4aa168a7f7d998f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void atrip::xcopy&lt; double &gt;</definition>
        <argsstring>(int *n, const DataFieldType&lt; double &gt; *x, int *incx, DataFieldType&lt; double &gt; *y, int *incy)</argsstring>
        <name>xcopy&lt; double &gt;</name>
        <qualifiedname>atrip::xcopy&lt; double &gt;</qualifiedname>
        <param>
          <type>int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceatrip_1a01ed999c96d78ffcac1a0ac0258ae07b" kindref="member">DataFieldType</ref>&lt; double &gt; *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>incx</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a01ed999c96d78ffcac1a0ac0258ae07b" kindref="member">DataFieldType</ref>&lt; double &gt; *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>incy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/src/atrip/Blas.cxx" line="121" column="3" bodyfile="/home/runner/work/atrip/atrip/src/atrip/Blas.cxx" bodystart="121" bodyend="134"/>
        <references refid="namespaceatrip_1a3c50f63737df805d0a20ee9aa9edf5ab">dcopy_</references>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1adae32c9110a18e8819b0aede563514c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void atrip::xcopy&lt; Complex &gt;</definition>
        <argsstring>(int *n, const DataFieldType&lt; Complex &gt; *x, int *incx, DataFieldType&lt; Complex &gt; *y, int *incy)</argsstring>
        <name>xcopy&lt; Complex &gt;</name>
        <qualifiedname>atrip::xcopy&lt; Complex &gt;</qualifiedname>
        <param>
          <type>int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceatrip_1a01ed999c96d78ffcac1a0ac0258ae07b" kindref="member">DataFieldType</ref>&lt; <ref refid="namespaceatrip_1aa4158a2e7e79c518dcb11d7ccfc1c82f" kindref="member">Complex</ref> &gt; *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>incx</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a01ed999c96d78ffcac1a0ac0258ae07b" kindref="member">DataFieldType</ref>&lt; <ref refid="namespaceatrip_1aa4158a2e7e79c518dcb11d7ccfc1c82f" kindref="member">Complex</ref> &gt; *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>incy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/src/atrip/Blas.cxx" line="137" column="3" bodyfile="/home/runner/work/atrip/atrip/src/atrip/Blas.cxx" bodystart="137" bodyend="150"/>
        <references refid="namespaceatrip_1a0ab6b5b2828912bb086db893519d4b42">zcopy_</references>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1aa73c739b1d3c24701db9a2af1fc0cdc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>double</type>
        <definition>double atrip::maybeConjugate</definition>
        <argsstring>(const double a)</argsstring>
        <name>maybeConjugate</name>
        <qualifiedname>atrip::maybeConjugate</qualifiedname>
        <param>
          <type>const double</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/src/atrip/Complex.cxx" line="21" column="21" bodyfile="/home/runner/work/atrip/atrip/src/atrip/Complex.cxx" bodystart="21" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1a3109af0495d84e38227d528cd87b4bbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="namespaceatrip_1aa4158a2e7e79c518dcb11d7ccfc1c82f" kindref="member">Complex</ref></type>
        <definition>Complex atrip::maybeConjugate</definition>
        <argsstring>(const Complex a)</argsstring>
        <name>maybeConjugate</name>
        <qualifiedname>atrip::maybeConjugate</qualifiedname>
        <param>
          <type>const <ref refid="namespaceatrip_1aa4158a2e7e79c518dcb11d7ccfc1c82f" kindref="member">Complex</ref></type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/src/atrip/Complex.cxx" line="22" column="22" bodyfile="/home/runner/work/atrip/atrip/src/atrip/Complex.cxx" bodystart="22" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1a3e24927f1ad25d7485c846cb1cfe9626" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>reordering_t</type>
            <declname>R</declname>
            <defname>R</defname>
          </param>
        </templateparamlist>
        <type><ref refid="CUDA_8hpp_1ab67f2150568dc3c433e9d8d03da6734c" kindref="member">__MAYBE_GLOBAL__</ref> void</type>
        <definition>__MAYBE_GLOBAL__ void atrip::reorder</definition>
        <argsstring>(reorder_proxy&lt; F, R &gt; proxy, size_t size, F *to, F *from)</argsstring>
        <name>reorder</name>
        <qualifiedname>atrip::reorder</qualifiedname>
        <param>
          <type><ref refid="structatrip_1_1reorder__proxy" kindref="compound">reorder_proxy</ref>&lt; F, R &gt;</type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>F *</type>
          <declname>to</declname>
        </param>
        <param>
          <type>F *</type>
          <declname>from</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/src/atrip/Equations.cxx" line="166" column="8" declfile="/home/runner/work/atrip/atrip/src/atrip/Equations.cxx" declline="166" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1a07602e56e5aa7d64d9afd4deaa63da6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>atrip::_MAKE_REORDER_</definition>
        <argsstring>(IJK, GO(to[idx], from[_IJK_(i, j, k)])) _MAKE_REORDER_(IKJ</argsstring>
        <name>_MAKE_REORDER_</name>
        <qualifiedname>atrip::_MAKE_REORDER_</qualifiedname>
        <param>
          <type><ref refid="namespaceatrip_1a75f77db93d0a312ab4b85fbe7c5918b5a546afa311eeed473d1c3e187a7b41e03" kindref="member">IJK</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a81cc2b0f9795e0d0581b1565f978df25" kindref="member">GO</ref>(to[idx], from[<ref refid="Equations_8cxx_1a395c02ccca573561c1c6e5a2145c496b" kindref="member">_IJK_</ref>(i, j, k)])</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/src/atrip/Equations.cxx" line="169" column="3"/>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1a81cc2b0f9795e0d0581b1565f978df25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>atrip::GO</definition>
        <argsstring>(to[idx], from[_IJK_(i, k, j)])) _MAKE_REORDER_(JIK</argsstring>
        <name>GO</name>
        <qualifiedname>atrip::GO</qualifiedname>
        <param>
          <type>to</type>
          <array>[idx]</array>
        </param>
        <param>
          <type>from</type>
          <array>[_IJK_(i, k, j)]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/src/atrip/Equations.cxx" line="170" column="4"/>
        <referencedby refid="namespaceatrip_1a40dd04592c08dab33973a8255d270857" compoundref="Equations_8cxx" startline="345" endline="378">singlesContribution</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1a762ff7474844b815c7f378df8f7eb702" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>atrip::GO</definition>
        <argsstring>(to[idx], from[_IJK_(j, i, k)])) _MAKE_REORDER_(JKI</argsstring>
        <name>GO</name>
        <qualifiedname>atrip::GO</qualifiedname>
        <param>
          <type>to</type>
          <array>[idx]</array>
        </param>
        <param>
          <type>from</type>
          <array>[_IJK_(j, i, k)]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/src/atrip/Equations.cxx" line="171" column="4"/>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1a90d04c0dba05e536c09371e0edf4546d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>atrip::GO</definition>
        <argsstring>(to[idx], from[_IJK_(j, k, i)])) _MAKE_REORDER_(KIJ</argsstring>
        <name>GO</name>
        <qualifiedname>atrip::GO</qualifiedname>
        <param>
          <type>to</type>
          <array>[idx]</array>
        </param>
        <param>
          <type>from</type>
          <array>[_IJK_(j, k, i)]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/src/atrip/Equations.cxx" line="172" column="4"/>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1a8eadfd874a25ce3bdc431f68e9c807ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>atrip::GO</definition>
        <argsstring>(to[idx], from[_IJK_(k, i, j)])) _MAKE_REORDER_(KJI</argsstring>
        <name>GO</name>
        <qualifiedname>atrip::GO</qualifiedname>
        <param>
          <type>to</type>
          <array>[idx]</array>
        </param>
        <param>
          <type>from</type>
          <array>[_IJK_(k, i, j)]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/src/atrip/Equations.cxx" line="173" column="4"/>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1a6898cbd320b3a099778721e736a56cd9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>atrip::GO</definition>
        <argsstring>(to[idx], from[_IJK_(k, j, i)])) template&lt; typename F &gt; double getEnergyDistinct(F const epsabc</argsstring>
        <name>GO</name>
        <qualifiedname>atrip::GO</qualifiedname>
        <param>
          <type>to</type>
          <array>[idx]</array>
        </param>
        <param>
          <type>from</type>
          <array>[_IJK_(k, j, i)]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/src/atrip/Equations.cxx" line="174" column="4"/>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1a0074ac0ca5ed1f3e9d8a3214176252ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>F</type>
        <definition>F atrip::energy</definition>
        <argsstring>(0.)</argsstring>
        <name>energy</name>
        <qualifiedname>atrip::energy</qualifiedname>
        <param>
          <type>0.</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/src/atrip/Equations.cxx" line="194" column="5" declfile="/home/runner/work/atrip/atrip/src/atrip/Equations.cxx" declline="194" declcolumn="5"/>
        <referencedby refid="namespaceatrip_1a0b2fa57a463a73c9389aa67e4961122a" compoundref="Equations_8cxx" startline="195" endline="245">for</referencedby>
        <referencedby refid="namespaceatrip_1aec9dfa406423eb145e2399183b941ca5" compoundref="Equations_8cxx" startline="252" endline="299">getEnergySame</referencedby>
        <referencedby refid="structatrip_1_1Atrip_1ac414d43de30968cc92a6f7a44e5cd9b6" compoundref="Atrip_8cxx" startline="55" endline="811">atrip::Atrip::run</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1a0b2fa57a463a73c9389aa67e4961122a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>atrip::for</definition>
        <argsstring>(size_t kk=0;kk&lt; No;kk+=blockSize)</argsstring>
        <name>for</name>
        <qualifiedname>atrip::for</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/src/atrip/Equations.cxx" line="195" column="3" bodyfile="/home/runner/work/atrip/atrip/src/atrip/Equations.cxx" bodystart="195" bodyend="245"/>
        <references refid="namespaceatrip_1a0074ac0ca5ed1f3e9d8a3214176252ec">energy</references>
        <references refid="namespaceatrip_1a3d1858f73f742a66de6531bec311554c" compoundref="Equations_8cxx" startline="190">epsi</references>
        <references refid="namespaceatrip_1ac382a0e309a4bd41a81731bbaf8839bd" compoundref="Equations_8cxx" startline="189">No</references>
        <references refid="namespaceatrip_1a42b933930dd992983f0b748d33361417" compoundref="Equations_8cxx" startline="191">Tijk</references>
        <references refid="namespaceatrip_1a96d51119991f52c17210d4bd93df27b2" compoundref="Equations_8cxx" startline="192">Zijk</references>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1aec9dfa406423eb145e2399183b941ca5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double atrip::getEnergySame</definition>
        <argsstring>(F const epsabc, size_t const No, F *const epsi, F *const Tijk, F *const Zijk)</argsstring>
        <name>getEnergySame</name>
        <qualifiedname>atrip::getEnergySame</qualifiedname>
        <param>
          <type>F const</type>
          <declname>epsabc</declname>
        </param>
        <param>
          <type>size_t const</type>
          <declname>No</declname>
        </param>
        <param>
          <type>F *const</type>
          <declname>epsi</declname>
        </param>
        <param>
          <type>F *const</type>
          <declname>Tijk</declname>
        </param>
        <param>
          <type>F *const</type>
          <declname>Zijk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/src/atrip/Equations.cxx" line="251" column="8" bodyfile="/home/runner/work/atrip/atrip/src/atrip/Equations.cxx" bodystart="252" bodyend="299" declfile="/home/runner/work/atrip/atrip/include/atrip/Equations.hpp" declline="44" declcolumn="8"/>
        <references refid="namespaceatrip_1a0074ac0ca5ed1f3e9d8a3214176252ec">energy</references>
        <references refid="namespaceatrip_1a3d1858f73f742a66de6531bec311554c" compoundref="Equations_8cxx" startline="190">epsi</references>
        <references refid="namespaceatrip_1ac382a0e309a4bd41a81731bbaf8839bd" compoundref="Equations_8cxx" startline="189">No</references>
        <references refid="namespaceatrip_1a42b933930dd992983f0b748d33361417" compoundref="Equations_8cxx" startline="191">Tijk</references>
        <references refid="namespaceatrip_1a96d51119991f52c17210d4bd93df27b2" compoundref="Equations_8cxx" startline="192">Zijk</references>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1a907be16399d76c852af0fb25b84b5f33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template double</type>
        <definition>template double atrip::getEnergyDistinct</definition>
        <argsstring>(double const epsabc, size_t const No, double *const epsi, double *const Tijk, double *const Zijk)</argsstring>
        <name>getEnergyDistinct</name>
        <qualifiedname>atrip::getEnergyDistinct</qualifiedname>
        <param>
          <type>double const</type>
          <declname>epsabc</declname>
        </param>
        <param>
          <type>size_t const</type>
          <declname>No</declname>
        </param>
        <param>
          <type>double *const</type>
          <declname>epsi</declname>
        </param>
        <param>
          <type>double *const</type>
          <declname>Tijk</declname>
        </param>
        <param>
          <type>double *const</type>
          <declname>Zijk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/src/atrip/Equations.cxx" line="305" column="8" declfile="/home/runner/work/atrip/atrip/src/atrip/Equations.cxx" declline="305" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1a11bcbcdfc9d59c80e4cbf48586557efd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template double</type>
        <definition>template double atrip::getEnergySame</definition>
        <argsstring>(double const epsabc, size_t const No, double *const epsi, double *const Tijk, double *const Zijk)</argsstring>
        <name>getEnergySame</name>
        <qualifiedname>atrip::getEnergySame</qualifiedname>
        <param>
          <type>double const</type>
          <declname>epsabc</declname>
        </param>
        <param>
          <type>size_t const</type>
          <declname>No</declname>
        </param>
        <param>
          <type>double *const</type>
          <declname>epsi</declname>
        </param>
        <param>
          <type>double *const</type>
          <declname>Tijk</declname>
        </param>
        <param>
          <type>double *const</type>
          <declname>Zijk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/src/atrip/Equations.cxx" line="314" column="8" declfile="/home/runner/work/atrip/atrip/src/atrip/Equations.cxx" declline="314" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1a4af74014d67e0256adfe42f90f727139" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template double</type>
        <definition>template double atrip::getEnergyDistinct</definition>
        <argsstring>(Complex const epsabc, size_t const No, Complex *const epsi, Complex *const Tijk, Complex *const Zijk)</argsstring>
        <name>getEnergyDistinct</name>
        <qualifiedname>atrip::getEnergyDistinct</qualifiedname>
        <param>
          <type><ref refid="namespaceatrip_1aa4158a2e7e79c518dcb11d7ccfc1c82f" kindref="member">Complex</ref> const</type>
          <declname>epsabc</declname>
        </param>
        <param>
          <type>size_t const</type>
          <declname>No</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1aa4158a2e7e79c518dcb11d7ccfc1c82f" kindref="member">Complex</ref> *const</type>
          <declname>epsi</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1aa4158a2e7e79c518dcb11d7ccfc1c82f" kindref="member">Complex</ref> *const</type>
          <declname>Tijk</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1aa4158a2e7e79c518dcb11d7ccfc1c82f" kindref="member">Complex</ref> *const</type>
          <declname>Zijk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/src/atrip/Equations.cxx" line="324" column="8" declfile="/home/runner/work/atrip/atrip/src/atrip/Equations.cxx" declline="324" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1a95169ba3b2653b42bfde3e30648bd7d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template double</type>
        <definition>template double atrip::getEnergySame</definition>
        <argsstring>(Complex const epsabc, size_t const No, Complex *const epsi, Complex *const Tijk, Complex *const Zijk)</argsstring>
        <name>getEnergySame</name>
        <qualifiedname>atrip::getEnergySame</qualifiedname>
        <param>
          <type><ref refid="namespaceatrip_1aa4158a2e7e79c518dcb11d7ccfc1c82f" kindref="member">Complex</ref> const</type>
          <declname>epsabc</declname>
        </param>
        <param>
          <type>size_t const</type>
          <declname>No</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1aa4158a2e7e79c518dcb11d7ccfc1c82f" kindref="member">Complex</ref> *const</type>
          <declname>epsi</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1aa4158a2e7e79c518dcb11d7ccfc1c82f" kindref="member">Complex</ref> *const</type>
          <declname>Tijk</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1aa4158a2e7e79c518dcb11d7ccfc1c82f" kindref="member">Complex</ref> *const</type>
          <declname>Zijk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/src/atrip/Equations.cxx" line="333" column="8" declfile="/home/runner/work/atrip/atrip/src/atrip/Equations.cxx" declline="333" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1a40dd04592c08dab33973a8255d270857" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type><ref refid="CUDA_8hpp_1ab67f2150568dc3c433e9d8d03da6734c" kindref="member">__MAYBE_GLOBAL__</ref> void</type>
        <definition>__MAYBE_GLOBAL__ void atrip::singlesContribution</definition>
        <argsstring>(size_t No, size_t Nv, size_t a, size_t b, size_t c, DataFieldType&lt; F &gt; *const Tph, DataFieldType&lt; F &gt; *const VABij, DataFieldType&lt; F &gt; *const VACij, DataFieldType&lt; F &gt; *const VBCij, DataFieldType&lt; F &gt; *Zijk)</argsstring>
        <name>singlesContribution</name>
        <qualifiedname>atrip::singlesContribution</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>No</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>Nv</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>a</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>b</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a01ed999c96d78ffcac1a0ac0258ae07b" kindref="member">DataFieldType</ref>&lt; F &gt; *const</type>
          <declname>Tph</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a01ed999c96d78ffcac1a0ac0258ae07b" kindref="member">DataFieldType</ref>&lt; F &gt; *const</type>
          <declname>VABij</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a01ed999c96d78ffcac1a0ac0258ae07b" kindref="member">DataFieldType</ref>&lt; F &gt; *const</type>
          <declname>VACij</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a01ed999c96d78ffcac1a0ac0258ae07b" kindref="member">DataFieldType</ref>&lt; F &gt; *const</type>
          <declname>VBCij</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a01ed999c96d78ffcac1a0ac0258ae07b" kindref="member">DataFieldType</ref>&lt; F &gt; *</type>
          <declname>Zijk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/src/atrip/Equations.cxx" line="344" column="8" bodyfile="/home/runner/work/atrip/atrip/src/atrip/Equations.cxx" bodystart="345" bodyend="378"/>
        <references refid="namespaceatrip_1a81cc2b0f9795e0d0581b1565f978df25">GO</references>
        <references refid="namespaceatrip_1ac382a0e309a4bd41a81731bbaf8839bd" compoundref="Equations_8cxx" startline="189">No</references>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1a47f1d4ba55c964f1bce05a73e191c3bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template <ref refid="CUDA_8hpp_1ab67f2150568dc3c433e9d8d03da6734c" kindref="member">__MAYBE_GLOBAL__</ref> void</type>
        <definition>template __MAYBE_GLOBAL__ void atrip::singlesContribution&lt; double &gt;</definition>
        <argsstring>(size_t No, size_t Nv, size_t a, size_t b, size_t c, double *const Tph, double *const VABij, double *const VACij, double *const VBCij, double *Zijk)</argsstring>
        <name>singlesContribution&lt; double &gt;</name>
        <qualifiedname>atrip::singlesContribution&lt; double &gt;</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>No</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>Nv</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>a</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>b</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>c</declname>
        </param>
        <param>
          <type>double *const</type>
          <declname>Tph</declname>
        </param>
        <param>
          <type>double *const</type>
          <declname>VABij</declname>
        </param>
        <param>
          <type>double *const</type>
          <declname>VACij</declname>
        </param>
        <param>
          <type>double *const</type>
          <declname>VBCij</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>Zijk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/src/atrip/Equations.cxx" line="383" column="3" declfile="/home/runner/work/atrip/atrip/src/atrip/Equations.cxx" declline="383" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1a6683090df36592ae76a384e80ef938e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template <ref refid="CUDA_8hpp_1ab67f2150568dc3c433e9d8d03da6734c" kindref="member">__MAYBE_GLOBAL__</ref> void</type>
        <definition>template __MAYBE_GLOBAL__ void atrip::singlesContribution&lt; Complex &gt;</definition>
        <argsstring>(size_t No, size_t Nv, size_t a, size_t b, size_t c, DataFieldType&lt; Complex &gt; *const Tph, DataFieldType&lt; Complex &gt; *const VABij, DataFieldType&lt; Complex &gt; *const VACij, DataFieldType&lt; Complex &gt; *const VBCij, DataFieldType&lt; Complex &gt; *Zijk)</argsstring>
        <name>singlesContribution&lt; Complex &gt;</name>
        <qualifiedname>atrip::singlesContribution&lt; Complex &gt;</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>No</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>Nv</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>a</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>b</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a01ed999c96d78ffcac1a0ac0258ae07b" kindref="member">DataFieldType</ref>&lt; <ref refid="namespaceatrip_1aa4158a2e7e79c518dcb11d7ccfc1c82f" kindref="member">Complex</ref> &gt; *const</type>
          <declname>Tph</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a01ed999c96d78ffcac1a0ac0258ae07b" kindref="member">DataFieldType</ref>&lt; <ref refid="namespaceatrip_1aa4158a2e7e79c518dcb11d7ccfc1c82f" kindref="member">Complex</ref> &gt; *const</type>
          <declname>VABij</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a01ed999c96d78ffcac1a0ac0258ae07b" kindref="member">DataFieldType</ref>&lt; <ref refid="namespaceatrip_1aa4158a2e7e79c518dcb11d7ccfc1c82f" kindref="member">Complex</ref> &gt; *const</type>
          <declname>VACij</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a01ed999c96d78ffcac1a0ac0258ae07b" kindref="member">DataFieldType</ref>&lt; <ref refid="namespaceatrip_1aa4158a2e7e79c518dcb11d7ccfc1c82f" kindref="member">Complex</ref> &gt; *const</type>
          <declname>VBCij</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a01ed999c96d78ffcac1a0ac0258ae07b" kindref="member">DataFieldType</ref>&lt; <ref refid="namespaceatrip_1aa4158a2e7e79c518dcb11d7ccfc1c82f" kindref="member">Complex</ref> &gt; *</type>
          <declname>Zijk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/src/atrip/Equations.cxx" line="396" column="3" declfile="/home/runner/work/atrip/atrip/src/atrip/Equations.cxx" declline="396" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1ab1387203a9c668ad0980a5288a3fe97d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void atrip::doublesContribution</definition>
        <argsstring>(const ABCTuple &amp;abc, size_t const No, size_t const Nv, DataPtr&lt; F &gt; const VABph, DataPtr&lt; F &gt; const VACph, DataPtr&lt; F &gt; const VBCph, DataPtr&lt; F &gt; const VBAph, DataPtr&lt; F &gt; const VCAph, DataPtr&lt; F &gt; const VCBph, DataPtr&lt; F &gt; const VhhhA, DataPtr&lt; F &gt; const VhhhB, DataPtr&lt; F &gt; const VhhhC, DataPtr&lt; F &gt; const TAphh, DataPtr&lt; F &gt; const TBphh, DataPtr&lt; F &gt; const TCphh, DataPtr&lt; F &gt; const TABhh, DataPtr&lt; F &gt; const TAChh, DataPtr&lt; F &gt; const TBChh, DataFieldType&lt; F &gt; *Tijk_)</argsstring>
        <name>doublesContribution</name>
        <qualifiedname>atrip::doublesContribution</qualifiedname>
        <param>
          <type>const <ref refid="namespaceatrip_1af838c7ed7996be477f99aad86114f26b" kindref="member">ABCTuple</ref> &amp;</type>
          <declname>abc</declname>
        </param>
        <param>
          <type>size_t const</type>
          <declname>No</declname>
        </param>
        <param>
          <type>size_t const</type>
          <declname>Nv</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a58948ccd67c60d4ec8ae0058af5ac658" kindref="member">DataPtr</ref>&lt; F &gt; const</type>
          <declname>VABph</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a58948ccd67c60d4ec8ae0058af5ac658" kindref="member">DataPtr</ref>&lt; F &gt; const</type>
          <declname>VACph</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a58948ccd67c60d4ec8ae0058af5ac658" kindref="member">DataPtr</ref>&lt; F &gt; const</type>
          <declname>VBCph</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a58948ccd67c60d4ec8ae0058af5ac658" kindref="member">DataPtr</ref>&lt; F &gt; const</type>
          <declname>VBAph</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a58948ccd67c60d4ec8ae0058af5ac658" kindref="member">DataPtr</ref>&lt; F &gt; const</type>
          <declname>VCAph</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a58948ccd67c60d4ec8ae0058af5ac658" kindref="member">DataPtr</ref>&lt; F &gt; const</type>
          <declname>VCBph</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a58948ccd67c60d4ec8ae0058af5ac658" kindref="member">DataPtr</ref>&lt; F &gt; const</type>
          <declname>VhhhA</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a58948ccd67c60d4ec8ae0058af5ac658" kindref="member">DataPtr</ref>&lt; F &gt; const</type>
          <declname>VhhhB</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a58948ccd67c60d4ec8ae0058af5ac658" kindref="member">DataPtr</ref>&lt; F &gt; const</type>
          <declname>VhhhC</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a58948ccd67c60d4ec8ae0058af5ac658" kindref="member">DataPtr</ref>&lt; F &gt; const</type>
          <declname>TAphh</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a58948ccd67c60d4ec8ae0058af5ac658" kindref="member">DataPtr</ref>&lt; F &gt; const</type>
          <declname>TBphh</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a58948ccd67c60d4ec8ae0058af5ac658" kindref="member">DataPtr</ref>&lt; F &gt; const</type>
          <declname>TCphh</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a58948ccd67c60d4ec8ae0058af5ac658" kindref="member">DataPtr</ref>&lt; F &gt; const</type>
          <declname>TABhh</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a58948ccd67c60d4ec8ae0058af5ac658" kindref="member">DataPtr</ref>&lt; F &gt; const</type>
          <declname>TAChh</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a58948ccd67c60d4ec8ae0058af5ac658" kindref="member">DataPtr</ref>&lt; F &gt; const</type>
          <declname>TBChh</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a01ed999c96d78ffcac1a0ac0258ae07b" kindref="member">DataFieldType</ref>&lt; F &gt; *</type>
          <declname>Tijk_</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/src/atrip/Equations.cxx" line="411" column="8" bodyfile="/home/runner/work/atrip/atrip/src/atrip/Equations.cxx" bodystart="412" bodyend="723" declfile="/home/runner/work/atrip/atrip/include/atrip/Equations.hpp" declline="74" declcolumn="8"/>
        <references refid="CUDA_8hpp_1a2e6d5173a73fe3fdffed8acc4909f87e" compoundref="CUDA_8hpp" startline="19">_CHECK_CUDA_SUCCESS</references>
        <references refid="namespaceatrip_1ac382a0e309a4bd41a81731bbaf8839bd" compoundref="Equations_8cxx" startline="189">No</references>
        <references refid="namespaceatrip_1a42b933930dd992983f0b748d33361417" compoundref="Equations_8cxx" startline="191">Tijk</references>
        <references refid="Utils_8hpp_1a684c98edc7c431d9fa25c1d75ae42f83" compoundref="Utils_8hpp" startline="65">WITH_CHRONO</references>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1ad062d14940160e453a20e95adda30860" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void atrip::doublesContribution&lt; double &gt;</definition>
        <argsstring>(const ABCTuple &amp;abc, size_t const No, size_t const Nv, DataPtr&lt; double &gt; const VABph, DataPtr&lt; double &gt; const VACph, DataPtr&lt; double &gt; const VBCph, DataPtr&lt; double &gt; const VBAph, DataPtr&lt; double &gt; const VCAph, DataPtr&lt; double &gt; const VCBph, DataPtr&lt; double &gt; const VhhhA, DataPtr&lt; double &gt; const VhhhB, DataPtr&lt; double &gt; const VhhhC, DataPtr&lt; double &gt; const TAphh, DataPtr&lt; double &gt; const TBphh, DataPtr&lt; double &gt; const TCphh, DataPtr&lt; double &gt; const TABhh, DataPtr&lt; double &gt; const TAChh, DataPtr&lt; double &gt; const TBChh, DataFieldType&lt; double &gt; *Tijk)</argsstring>
        <name>doublesContribution&lt; double &gt;</name>
        <qualifiedname>atrip::doublesContribution&lt; double &gt;</qualifiedname>
        <param>
          <type>const <ref refid="namespaceatrip_1af838c7ed7996be477f99aad86114f26b" kindref="member">ABCTuple</ref> &amp;</type>
          <declname>abc</declname>
        </param>
        <param>
          <type>size_t const</type>
          <declname>No</declname>
        </param>
        <param>
          <type>size_t const</type>
          <declname>Nv</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a58948ccd67c60d4ec8ae0058af5ac658" kindref="member">DataPtr</ref>&lt; double &gt; const</type>
          <declname>VABph</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a58948ccd67c60d4ec8ae0058af5ac658" kindref="member">DataPtr</ref>&lt; double &gt; const</type>
          <declname>VACph</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a58948ccd67c60d4ec8ae0058af5ac658" kindref="member">DataPtr</ref>&lt; double &gt; const</type>
          <declname>VBCph</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a58948ccd67c60d4ec8ae0058af5ac658" kindref="member">DataPtr</ref>&lt; double &gt; const</type>
          <declname>VBAph</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a58948ccd67c60d4ec8ae0058af5ac658" kindref="member">DataPtr</ref>&lt; double &gt; const</type>
          <declname>VCAph</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a58948ccd67c60d4ec8ae0058af5ac658" kindref="member">DataPtr</ref>&lt; double &gt; const</type>
          <declname>VCBph</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a58948ccd67c60d4ec8ae0058af5ac658" kindref="member">DataPtr</ref>&lt; double &gt; const</type>
          <declname>VhhhA</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a58948ccd67c60d4ec8ae0058af5ac658" kindref="member">DataPtr</ref>&lt; double &gt; const</type>
          <declname>VhhhB</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a58948ccd67c60d4ec8ae0058af5ac658" kindref="member">DataPtr</ref>&lt; double &gt; const</type>
          <declname>VhhhC</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a58948ccd67c60d4ec8ae0058af5ac658" kindref="member">DataPtr</ref>&lt; double &gt; const</type>
          <declname>TAphh</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a58948ccd67c60d4ec8ae0058af5ac658" kindref="member">DataPtr</ref>&lt; double &gt; const</type>
          <declname>TBphh</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a58948ccd67c60d4ec8ae0058af5ac658" kindref="member">DataPtr</ref>&lt; double &gt; const</type>
          <declname>TCphh</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a58948ccd67c60d4ec8ae0058af5ac658" kindref="member">DataPtr</ref>&lt; double &gt; const</type>
          <declname>TABhh</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a58948ccd67c60d4ec8ae0058af5ac658" kindref="member">DataPtr</ref>&lt; double &gt; const</type>
          <declname>TAChh</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a58948ccd67c60d4ec8ae0058af5ac658" kindref="member">DataPtr</ref>&lt; double &gt; const</type>
          <declname>TBChh</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a01ed999c96d78ffcac1a0ac0258ae07b" kindref="member">DataFieldType</ref>&lt; double &gt; *</type>
          <declname>Tijk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/src/atrip/Equations.cxx" line="729" column="3" declfile="/home/runner/work/atrip/atrip/src/atrip/Equations.cxx" declline="729" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1a8ae659da324c41f7f5a2204767bb32bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void atrip::doublesContribution&lt; Complex &gt;</definition>
        <argsstring>(const ABCTuple &amp;abc, size_t const No, size_t const Nv, DataPtr&lt; Complex &gt; const VABph, DataPtr&lt; Complex &gt; const VACph, DataPtr&lt; Complex &gt; const VBCph, DataPtr&lt; Complex &gt; const VBAph, DataPtr&lt; Complex &gt; const VCAph, DataPtr&lt; Complex &gt; const VCBph, DataPtr&lt; Complex &gt; const VhhhA, DataPtr&lt; Complex &gt; const VhhhB, DataPtr&lt; Complex &gt; const VhhhC, DataPtr&lt; Complex &gt; const TAphh, DataPtr&lt; Complex &gt; const TBphh, DataPtr&lt; Complex &gt; const TCphh, DataPtr&lt; Complex &gt; const TABhh, DataPtr&lt; Complex &gt; const TAChh, DataPtr&lt; Complex &gt; const TBChh, DataFieldType&lt; Complex &gt; *Tijk)</argsstring>
        <name>doublesContribution&lt; Complex &gt;</name>
        <qualifiedname>atrip::doublesContribution&lt; Complex &gt;</qualifiedname>
        <param>
          <type>const <ref refid="namespaceatrip_1af838c7ed7996be477f99aad86114f26b" kindref="member">ABCTuple</ref> &amp;</type>
          <declname>abc</declname>
        </param>
        <param>
          <type>size_t const</type>
          <declname>No</declname>
        </param>
        <param>
          <type>size_t const</type>
          <declname>Nv</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a58948ccd67c60d4ec8ae0058af5ac658" kindref="member">DataPtr</ref>&lt; <ref refid="namespaceatrip_1aa4158a2e7e79c518dcb11d7ccfc1c82f" kindref="member">Complex</ref> &gt; const</type>
          <declname>VABph</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a58948ccd67c60d4ec8ae0058af5ac658" kindref="member">DataPtr</ref>&lt; <ref refid="namespaceatrip_1aa4158a2e7e79c518dcb11d7ccfc1c82f" kindref="member">Complex</ref> &gt; const</type>
          <declname>VACph</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a58948ccd67c60d4ec8ae0058af5ac658" kindref="member">DataPtr</ref>&lt; <ref refid="namespaceatrip_1aa4158a2e7e79c518dcb11d7ccfc1c82f" kindref="member">Complex</ref> &gt; const</type>
          <declname>VBCph</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a58948ccd67c60d4ec8ae0058af5ac658" kindref="member">DataPtr</ref>&lt; <ref refid="namespaceatrip_1aa4158a2e7e79c518dcb11d7ccfc1c82f" kindref="member">Complex</ref> &gt; const</type>
          <declname>VBAph</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a58948ccd67c60d4ec8ae0058af5ac658" kindref="member">DataPtr</ref>&lt; <ref refid="namespaceatrip_1aa4158a2e7e79c518dcb11d7ccfc1c82f" kindref="member">Complex</ref> &gt; const</type>
          <declname>VCAph</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a58948ccd67c60d4ec8ae0058af5ac658" kindref="member">DataPtr</ref>&lt; <ref refid="namespaceatrip_1aa4158a2e7e79c518dcb11d7ccfc1c82f" kindref="member">Complex</ref> &gt; const</type>
          <declname>VCBph</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a58948ccd67c60d4ec8ae0058af5ac658" kindref="member">DataPtr</ref>&lt; <ref refid="namespaceatrip_1aa4158a2e7e79c518dcb11d7ccfc1c82f" kindref="member">Complex</ref> &gt; const</type>
          <declname>VhhhA</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a58948ccd67c60d4ec8ae0058af5ac658" kindref="member">DataPtr</ref>&lt; <ref refid="namespaceatrip_1aa4158a2e7e79c518dcb11d7ccfc1c82f" kindref="member">Complex</ref> &gt; const</type>
          <declname>VhhhB</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a58948ccd67c60d4ec8ae0058af5ac658" kindref="member">DataPtr</ref>&lt; <ref refid="namespaceatrip_1aa4158a2e7e79c518dcb11d7ccfc1c82f" kindref="member">Complex</ref> &gt; const</type>
          <declname>VhhhC</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a58948ccd67c60d4ec8ae0058af5ac658" kindref="member">DataPtr</ref>&lt; <ref refid="namespaceatrip_1aa4158a2e7e79c518dcb11d7ccfc1c82f" kindref="member">Complex</ref> &gt; const</type>
          <declname>TAphh</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a58948ccd67c60d4ec8ae0058af5ac658" kindref="member">DataPtr</ref>&lt; <ref refid="namespaceatrip_1aa4158a2e7e79c518dcb11d7ccfc1c82f" kindref="member">Complex</ref> &gt; const</type>
          <declname>TBphh</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a58948ccd67c60d4ec8ae0058af5ac658" kindref="member">DataPtr</ref>&lt; <ref refid="namespaceatrip_1aa4158a2e7e79c518dcb11d7ccfc1c82f" kindref="member">Complex</ref> &gt; const</type>
          <declname>TCphh</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a58948ccd67c60d4ec8ae0058af5ac658" kindref="member">DataPtr</ref>&lt; <ref refid="namespaceatrip_1aa4158a2e7e79c518dcb11d7ccfc1c82f" kindref="member">Complex</ref> &gt; const</type>
          <declname>TABhh</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a58948ccd67c60d4ec8ae0058af5ac658" kindref="member">DataPtr</ref>&lt; <ref refid="namespaceatrip_1aa4158a2e7e79c518dcb11d7ccfc1c82f" kindref="member">Complex</ref> &gt; const</type>
          <declname>TAChh</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a58948ccd67c60d4ec8ae0058af5ac658" kindref="member">DataPtr</ref>&lt; <ref refid="namespaceatrip_1aa4158a2e7e79c518dcb11d7ccfc1c82f" kindref="member">Complex</ref> &gt; const</type>
          <declname>TBChh</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a01ed999c96d78ffcac1a0ac0258ae07b" kindref="member">DataFieldType</ref>&lt; <ref refid="namespaceatrip_1aa4158a2e7e79c518dcb11d7ccfc1c82f" kindref="member">Complex</ref> &gt; *</type>
          <declname>Tijk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/src/atrip/Equations.cxx" line="757" column="3" declfile="/home/runner/work/atrip/atrip/src/atrip/Equations.cxx" declline="757" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1a302b648f916e8ad102dd42072cca699f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void atrip::dgemm_</definition>
        <argsstring>(const char *transa, const char *transb, const int *m, const int *n, const int *k, double *alpha, const double *a, const int *lda, const double *b, const int *ldb, double *beta, double *c, const int *ldc)</argsstring>
        <name>dgemm_</name>
        <qualifiedname>atrip::dgemm_</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>transa</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>transb</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>k</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>lda</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>ldb</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>ldc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Blas.hpp" line="26" column="10" declfile="/home/runner/work/atrip/atrip/include/atrip/Blas.hpp" declline="26" declcolumn="10"/>
        <referencedby refid="namespaceatrip_1ae0be26b9684b07e88f48676188f0347a" compoundref="Blas_8cxx" startline="41" endline="79">xgemm&lt; double &gt;</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1a7dbace53db67d2fe7117fd8d401a714a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void atrip::zgemm_</definition>
        <argsstring>(const char *transa, const char *transb, const int *m, const int *n, const int *k, Complex *alpha, const Complex *A, const int *lda, const Complex *B, const int *ldb, Complex *beta, Complex *C, const int *ldc)</argsstring>
        <name>zgemm_</name>
        <qualifiedname>atrip::zgemm_</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>transa</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>transb</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1aa4158a2e7e79c518dcb11d7ccfc1c82f" kindref="member">Complex</ref> *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceatrip_1aa4158a2e7e79c518dcb11d7ccfc1c82f" kindref="member">Complex</ref> *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>lda</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceatrip_1aa4158a2e7e79c518dcb11d7ccfc1c82f" kindref="member">Complex</ref> *</type>
          <declname>B</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>ldb</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1aa4158a2e7e79c518dcb11d7ccfc1c82f" kindref="member">Complex</ref> *</type>
          <declname>beta</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1aa4158a2e7e79c518dcb11d7ccfc1c82f" kindref="member">Complex</ref> *</type>
          <declname>C</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>ldc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Blas.hpp" line="42" column="10" declfile="/home/runner/work/atrip/atrip/include/atrip/Blas.hpp" declline="42" declcolumn="10"/>
        <referencedby refid="namespaceatrip_1a45054368aa6a5885bd17f62391ffaf18" compoundref="Blas_8cxx" startline="82" endline="117">xgemm&lt; Complex &gt;</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1a3c50f63737df805d0a20ee9aa9edf5ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void atrip::dcopy_</definition>
        <argsstring>(int *n, const double *x, int *incx, double *y, int *incy)</argsstring>
        <name>dcopy_</name>
        <qualifiedname>atrip::dcopy_</qualifiedname>
        <param>
          <type>int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>incx</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>incy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Blas.hpp" line="58" column="8" declfile="/home/runner/work/atrip/atrip/include/atrip/Blas.hpp" declline="58" declcolumn="8"/>
        <referencedby refid="namespaceatrip_1ac85e8ff32c2d5e26b4aa168a7f7d998f" compoundref="Blas_8cxx" startline="121" endline="134">xcopy&lt; double &gt;</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1a0ab6b5b2828912bb086db893519d4b42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void atrip::zcopy_</definition>
        <argsstring>(int *n, const void *x, int *incx, void *y, int *incy)</argsstring>
        <name>zcopy_</name>
        <qualifiedname>atrip::zcopy_</qualifiedname>
        <param>
          <type>int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>incx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>incy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Blas.hpp" line="64" column="8" declfile="/home/runner/work/atrip/atrip/include/atrip/Blas.hpp" declline="64" declcolumn="8"/>
        <referencedby refid="namespaceatrip_1adae32c9110a18e8819b0aede563514c5" compoundref="Blas_8cxx" startline="137" endline="150">xcopy&lt; Complex &gt;</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1a0cd1521fc692bf2e9d22d2aedbf4af18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void atrip::xcopy</definition>
        <argsstring>(int *n, const DataFieldType&lt; F &gt; *x, int *incx, DataFieldType&lt; F &gt; *y, int *incy)</argsstring>
        <name>xcopy</name>
        <qualifiedname>atrip::xcopy</qualifiedname>
        <param>
          <type>int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceatrip_1a01ed999c96d78ffcac1a0ac0258ae07b" kindref="member">DataFieldType</ref>&lt; F &gt; *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>incx</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a01ed999c96d78ffcac1a0ac0258ae07b" kindref="member">DataFieldType</ref>&lt; F &gt; *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>incy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Blas.hpp" line="75" column="8" declfile="/home/runner/work/atrip/atrip/include/atrip/Blas.hpp" declline="75" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1a0c35c51428658725f6e18e65bd03cb63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void atrip::xgemm</definition>
        <argsstring>(const char *transa, const char *transb, const int *m, const int *n, const int *k, F *alpha, const DataFieldType&lt; F &gt; *A, const int *lda, const DataFieldType&lt; F &gt; *B, const int *ldb, F *beta, DataFieldType&lt; F &gt; *C, const int *ldc)</argsstring>
        <name>xgemm</name>
        <qualifiedname>atrip::xgemm</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>transa</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>transb</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>k</declname>
        </param>
        <param>
          <type>F *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceatrip_1a01ed999c96d78ffcac1a0ac0258ae07b" kindref="member">DataFieldType</ref>&lt; F &gt; *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>lda</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceatrip_1a01ed999c96d78ffcac1a0ac0258ae07b" kindref="member">DataFieldType</ref>&lt; F &gt; *</type>
          <declname>B</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>ldb</declname>
        </param>
        <param>
          <type>F *</type>
          <declname>beta</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a01ed999c96d78ffcac1a0ac0258ae07b" kindref="member">DataFieldType</ref>&lt; F &gt; *</type>
          <declname>C</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>ldc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Blas.hpp" line="82" column="8" declfile="/home/runner/work/atrip/atrip/include/atrip/Blas.hpp" declline="82" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1a5b178d65b82630d40ed38d9ccd86e2a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void atrip::write_checkpoint</definition>
        <argsstring>(Checkpoint const &amp;c, std::string const &amp;filepath)</argsstring>
        <name>write_checkpoint</name>
        <qualifiedname>atrip::write_checkpoint</qualifiedname>
        <param>
          <type><ref refid="structatrip_1_1Checkpoint" kindref="compound">Checkpoint</ref> const &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>filepath</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Checkpoint.hpp" line="40" column="6" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Checkpoint.hpp" bodystart="40" bodyend="56"/>
        <references refid="structatrip_1_1Checkpoint_1a3a8108da62e957ebe63f7a0020b5b055" compoundref="Checkpoint_8hpp" startline="31">atrip::Checkpoint::energy</references>
        <references refid="structatrip_1_1Checkpoint_1abb5df4833497679ea0659f62fd534506" compoundref="Checkpoint_8hpp" startline="32">atrip::Checkpoint::iteration</references>
        <references refid="structatrip_1_1Checkpoint_1ace368565e89f5f2532a58e51d0eccd1b" compoundref="Checkpoint_8hpp" startline="30">atrip::Checkpoint::nnodes</references>
        <references refid="structatrip_1_1Checkpoint_1aa65e33f6fbeb680cd164b3adf559566c" compoundref="Checkpoint_8hpp" startline="28">atrip::Checkpoint::no</references>
        <references refid="structatrip_1_1Checkpoint_1a58134223c7e2ff5a6608c3d55c1c8682" compoundref="Checkpoint_8hpp" startline="29">atrip::Checkpoint::nranks</references>
        <references refid="structatrip_1_1Checkpoint_1a508d48ea8613cc353cc4e2df6619087b" compoundref="Checkpoint_8hpp" startline="28">atrip::Checkpoint::nv</references>
        <references refid="structatrip_1_1Checkpoint_1a6007a0e5cc2cbbec3c4cba70b368777a" compoundref="Checkpoint_8hpp" startline="35">atrip::Checkpoint::rankRoundRobin</references>
        <referencedby refid="structatrip_1_1Atrip_1ac414d43de30968cc92a6f7a44e5cd9b6" compoundref="Atrip_8cxx" startline="55" endline="811">atrip::Atrip::run</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1a0e552094c9b3e3af0d38faf48a47a3db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structatrip_1_1Checkpoint" kindref="compound">Checkpoint</ref></type>
        <definition>Checkpoint atrip::read_checkpoint</definition>
        <argsstring>(std::ifstream &amp;in)</argsstring>
        <name>read_checkpoint</name>
        <qualifiedname>atrip::read_checkpoint</qualifiedname>
        <param>
          <type>std::ifstream &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Checkpoint.hpp" line="59" column="12" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Checkpoint.hpp" bodystart="59" bodyend="81"/>
        <references refid="structatrip_1_1Checkpoint_1a3a8108da62e957ebe63f7a0020b5b055" compoundref="Checkpoint_8hpp" startline="31">atrip::Checkpoint::energy</references>
        <references refid="structatrip_1_1Checkpoint_1abb5df4833497679ea0659f62fd534506" compoundref="Checkpoint_8hpp" startline="32">atrip::Checkpoint::iteration</references>
        <references refid="structatrip_1_1Checkpoint_1ace368565e89f5f2532a58e51d0eccd1b" compoundref="Checkpoint_8hpp" startline="30">atrip::Checkpoint::nnodes</references>
        <references refid="structatrip_1_1Checkpoint_1aa65e33f6fbeb680cd164b3adf559566c" compoundref="Checkpoint_8hpp" startline="28">atrip::Checkpoint::no</references>
        <references refid="structatrip_1_1Checkpoint_1a58134223c7e2ff5a6608c3d55c1c8682" compoundref="Checkpoint_8hpp" startline="29">atrip::Checkpoint::nranks</references>
        <references refid="structatrip_1_1Checkpoint_1a508d48ea8613cc353cc4e2df6619087b" compoundref="Checkpoint_8hpp" startline="28">atrip::Checkpoint::nv</references>
        <references refid="structatrip_1_1Checkpoint_1a6007a0e5cc2cbbec3c4cba70b368777a" compoundref="Checkpoint_8hpp" startline="35">atrip::Checkpoint::rankRoundRobin</references>
        <referencedby refid="namespaceatrip_1acb8c08d5972eb89777650317e5b765d2" compoundref="Checkpoint_8hpp" startline="84" endline="87">read_checkpoint</referencedby>
        <referencedby refid="structatrip_1_1Atrip_1ac414d43de30968cc92a6f7a44e5cd9b6" compoundref="Atrip_8cxx" startline="55" endline="811">atrip::Atrip::run</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1acb8c08d5972eb89777650317e5b765d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structatrip_1_1Checkpoint" kindref="compound">Checkpoint</ref></type>
        <definition>Checkpoint atrip::read_checkpoint</definition>
        <argsstring>(std::string const &amp;filepath)</argsstring>
        <name>read_checkpoint</name>
        <qualifiedname>atrip::read_checkpoint</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>filepath</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Checkpoint.hpp" line="84" column="12" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Checkpoint.hpp" bodystart="84" bodyend="87"/>
        <references refid="namespaceatrip_1a0e552094c9b3e3af0d38faf48a47a3db" compoundref="Checkpoint_8hpp" startline="59" endline="81">read_checkpoint</references>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1aa620d90fbd45d36dc6138cb86ac6d3a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>F</type>
        <definition>F atrip::maybeConjugate</definition>
        <argsstring>(const F)</argsstring>
        <name>maybeConjugate</name>
        <qualifiedname>atrip::maybeConjugate</qualifiedname>
        <param>
          <type>const</type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Complex.hpp" line="29" column="17" declfile="/home/runner/work/atrip/atrip/include/atrip/Complex.hpp" declline="29" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1a65234e51491c3fa418fcdfeb6e51ee1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void atrip::registerIterationDescriptor</definition>
        <argsstring>(IterationDescriptor)</argsstring>
        <name>registerIterationDescriptor</name>
        <qualifiedname>atrip::registerIterationDescriptor</qualifiedname>
        <param>
          <type><ref refid="namespaceatrip_1af4afd47789d6e8e39ce3886578386d6d" kindref="member">IterationDescriptor</ref></type>
          <defname>d</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Debug.hpp" line="102" column="8" bodyfile="/home/runner/work/atrip/atrip/src/atrip/Atrip.cxx" bodystart="44" bodyend="46" declfile="/home/runner/work/atrip/atrip/include/atrip/Debug.hpp" declline="102" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1adaf0200c976351f46d2fe2b4a8ebe45b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double atrip::getEnergyDistinct</definition>
        <argsstring>(F const epsabc, size_t const No, F *const epsi, F *const Tijk, F *const Zijk)</argsstring>
        <name>getEnergyDistinct</name>
        <qualifiedname>atrip::getEnergyDistinct</qualifiedname>
        <param>
          <type>F const</type>
          <declname>epsabc</declname>
        </param>
        <param>
          <type>size_t const</type>
          <declname>No</declname>
        </param>
        <param>
          <type>F *const</type>
          <declname>epsi</declname>
        </param>
        <param>
          <type>F *const</type>
          <declname>Tijk</declname>
        </param>
        <param>
          <type>F *const</type>
          <declname>Zijk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Equations.hpp" line="35" column="8" declfile="/home/runner/work/atrip/atrip/include/atrip/Equations.hpp" declline="35" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1a7231babbd637e91b841d63099549de8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void atrip::singlesContribution</definition>
        <argsstring>(size_t No, size_t Nv, size_t a, size_t b, size_t c, DataFieldType&lt; F &gt; *const Tph, DataFieldType&lt; F &gt; *const VABij, DataFieldType&lt; F &gt; *const VACij, DataFieldType&lt; F &gt; *const VBCij, DataFieldType&lt; F &gt; *Zijk)</argsstring>
        <name>singlesContribution</name>
        <qualifiedname>atrip::singlesContribution</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>No</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>Nv</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>a</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>b</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a01ed999c96d78ffcac1a0ac0258ae07b" kindref="member">DataFieldType</ref>&lt; F &gt; *const</type>
          <declname>Tph</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a01ed999c96d78ffcac1a0ac0258ae07b" kindref="member">DataFieldType</ref>&lt; F &gt; *const</type>
          <declname>VABij</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a01ed999c96d78ffcac1a0ac0258ae07b" kindref="member">DataFieldType</ref>&lt; F &gt; *const</type>
          <declname>VACij</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a01ed999c96d78ffcac1a0ac0258ae07b" kindref="member">DataFieldType</ref>&lt; F &gt; *const</type>
          <declname>VBCij</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a01ed999c96d78ffcac1a0ac0258ae07b" kindref="member">DataFieldType</ref>&lt; F &gt; *</type>
          <declname>Zijk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Equations.hpp" line="58" column="6" bodyfile="/home/runner/work/atrip/atrip/src/atrip/Equations.cxx" bodystart="345" bodyend="378" declfile="/home/runner/work/atrip/atrip/include/atrip/Equations.hpp" declline="58" declcolumn="6"/>
        <references refid="namespaceatrip_1a81cc2b0f9795e0d0581b1565f978df25">GO</references>
        <references refid="namespaceatrip_1ac382a0e309a4bd41a81731bbaf8839bd" compoundref="Equations_8cxx" startline="189">No</references>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1a36ea310b3a29e6d68402251cedf5e542" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; atrip::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, typename Slice&lt; F &gt;::Location const &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>atrip::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>typename <ref refid="structatrip_1_1Slice" kindref="compound">Slice</ref>&lt; F &gt;::Location const &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Slice.hpp" line="503" column="1" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Slice.hpp" bodystart="503" bodyend="507"/>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1a425e1a9ba33666dec82fd4575664a48f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; atrip::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, typename Slice&lt; F &gt;::Info const &amp;i)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>atrip::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>typename <ref refid="structatrip_1_1Slice" kindref="compound">Slice</ref>&lt; F &gt;::Info const &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Slice.hpp" line="510" column="1" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Slice.hpp" bodystart="510" bodyend="517"/>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1ab93cbc0ed3ae01101d887207e3032916" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classatrip_1_1SliceUnion" kindref="compound">SliceUnion</ref>&lt; F &gt; &amp;</type>
        <definition>SliceUnion&lt; F &gt; &amp; atrip::unionByName</definition>
        <argsstring>(std::vector&lt; SliceUnion&lt; F &gt; * &gt; const &amp;unions, typename Slice&lt; F &gt;::Name name)</argsstring>
        <name>unionByName</name>
        <qualifiedname>atrip::unionByName</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classatrip_1_1SliceUnion" kindref="compound">SliceUnion</ref>&lt; F &gt; * &gt; const &amp;</type>
          <declname>unions</declname>
        </param>
        <param>
          <type>typename <ref refid="structatrip_1_1Slice" kindref="compound">Slice</ref>&lt; F &gt;::Name</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/SliceUnion.hpp" line="612" column="3" bodyfile="/home/runner/work/atrip/atrip/include/atrip/SliceUnion.hpp" bodystart="612" bodyend="625"/>
        <referencedby refid="structatrip_1_1Atrip_1ac414d43de30968cc92a6f7a44e5cd9b6" compoundref="Atrip_8cxx" startline="55" endline="811">atrip::Atrip::run</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1adf9f0314b16a7dc5e7c7d47c622a1338" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; atrip::getNodeNames</definition>
        <argsstring>(MPI_Comm comm)</argsstring>
        <name>getNodeNames</name>
        <qualifiedname>atrip::getNodeNames</qualifiedname>
        <param>
          <type>MPI_Comm</type>
          <declname>comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Tuples.hpp" line="55" column="13" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Tuples.hpp" bodystart="55" bodyend="91"/>
        <referencedby refid="namespaceatrip_1af9fd13d6ed4a11730462a362543d6e26" compoundref="Tuples_8hpp" startline="143" endline="154">getClusterInfo</referencedby>
        <referencedby refid="namespaceatrip_1_1group__and__sort_1a4e0708f21a913d72d93cc5feb5bd9328" compoundref="Tuples_8hpp" startline="430" endline="536">atrip::group_and_sort::main</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1a97dd69bc4fe50212652f17f2e6bd04fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename A</type>
          </param>
        </templateparamlist>
        <type>A</type>
        <definition>A atrip::unique</definition>
        <argsstring>(A const &amp;xs)</argsstring>
        <name>unique</name>
        <qualifiedname>atrip::unique</qualifiedname>
        <param>
          <type>A const &amp;</type>
          <declname>xs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Tuples.hpp" line="104" column="3" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Tuples.hpp" bodystart="104" bodyend="110"/>
        <references refid="namespaceatrip_1a97dd69bc4fe50212652f17f2e6bd04fb" compoundref="Tuples_8hpp" startline="104" endline="110">unique</references>
        <referencedby refid="namespaceatrip_1af9fd13d6ed4a11730462a362543d6e26" compoundref="Tuples_8hpp" startline="143" endline="154">getClusterInfo</referencedby>
        <referencedby refid="namespaceatrip_1a3cdba26c5e1b49fd5a9359658484e1f0" compoundref="Tuples_8hpp" startline="113" endline="135">getNodeInfos</referencedby>
        <referencedby refid="namespaceatrip_1_1group__and__sort_1a64e55f94387e9330b4afdb3e6a6d5556" compoundref="Tuples_8hpp" startline="232" endline="239">atrip::group_and_sort::getTupleNodes</referencedby>
        <referencedby refid="namespaceatrip_1_1group__and__sort_1a4e0708f21a913d72d93cc5feb5bd9328" compoundref="Tuples_8hpp" startline="430" endline="536">atrip::group_and_sort::main</referencedby>
        <referencedby refid="namespaceatrip_1a97dd69bc4fe50212652f17f2e6bd04fb" compoundref="Tuples_8hpp" startline="104" endline="110">unique</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1a3cdba26c5e1b49fd5a9359658484e1f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="structatrip_1_1RankInfo" kindref="compound">RankInfo</ref> &gt;</type>
        <definition>std::vector&lt; RankInfo &gt; atrip::getNodeInfos</definition>
        <argsstring>(std::vector&lt; string &gt; const &amp;nodeNames)</argsstring>
        <name>getNodeInfos</name>
        <qualifiedname>atrip::getNodeInfos</qualifiedname>
        <param>
          <type>std::vector&lt; string &gt; const &amp;</type>
          <declname>nodeNames</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Tuples.hpp" line="113" column="1" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Tuples.hpp" bodystart="113" bodyend="135"/>
        <references refid="namespaceatrip_1a97dd69bc4fe50212652f17f2e6bd04fb" compoundref="Tuples_8hpp" startline="104" endline="110">unique</references>
        <referencedby refid="namespaceatrip_1af9fd13d6ed4a11730462a362543d6e26" compoundref="Tuples_8hpp" startline="143" endline="154">getClusterInfo</referencedby>
        <referencedby refid="namespaceatrip_1_1group__and__sort_1a4e0708f21a913d72d93cc5feb5bd9328" compoundref="Tuples_8hpp" startline="430" endline="536">atrip::group_and_sort::main</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1af9fd13d6ed4a11730462a362543d6e26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structatrip_1_1ClusterInfo" kindref="compound">ClusterInfo</ref></type>
        <definition>ClusterInfo atrip::getClusterInfo</definition>
        <argsstring>(MPI_Comm comm)</argsstring>
        <name>getClusterInfo</name>
        <qualifiedname>atrip::getClusterInfo</qualifiedname>
        <param>
          <type>MPI_Comm</type>
          <declname>comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Tuples.hpp" line="143" column="1" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Tuples.hpp" bodystart="143" bodyend="154"/>
        <references refid="namespaceatrip_1a3cdba26c5e1b49fd5a9359658484e1f0" compoundref="Tuples_8hpp" startline="113" endline="135">getNodeInfos</references>
        <references refid="namespaceatrip_1adf9f0314b16a7dc5e7c7d47c622a1338" compoundref="Tuples_8hpp" startline="55" endline="91">getNodeNames</references>
        <references refid="namespaceatrip_1a97dd69bc4fe50212652f17f2e6bd04fb" compoundref="Tuples_8hpp" startline="104" endline="110">unique</references>
        <referencedby refid="structatrip_1_1Atrip_1ac414d43de30968cc92a6f7a44e5cd9b6" compoundref="Atrip_8cxx" startline="55" endline="811">atrip::Atrip::run</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1a6d24cef8b67603413dfae0002a083b95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceatrip_1a574f187428c0e46270abd5331fdd729a" kindref="member">ABCTuples</ref></type>
        <definition>ABCTuples atrip::getTuplesList</definition>
        <argsstring>(size_t Nv, size_t rank, size_t np)</argsstring>
        <name>getTuplesList</name>
        <qualifiedname>atrip::getTuplesList</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>Nv</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>rank</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>np</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Tuples.hpp" line="158" column="11" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Tuples.hpp" bodystart="158" bodyend="188"/>
        <references refid="namespaceatrip_1a341e9614e55178a8e9537898f42ac636" compoundref="Tuples_8hpp" startline="43">FAKE_TUPLE</references>
        <references refid="Debug_8hpp_1aab91ba8612c2b67dad4376d30871eb95" compoundref="Debug_8hpp" startline="79">LOG</references>
        <references refid="Debug_8hpp_1a3f86e6b81edd7297ee6f9fd44cba3149" compoundref="Debug_8hpp" startline="70">WITH_RANK</references>
        <referencedby refid="structatrip_1_1NaiveDistribution_1aeb41c2a6f7086e9085d0dbd93e103d39" compoundref="Tuples_8hpp" startline="209" endline="214">atrip::NaiveDistribution::getTuples</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1ad3b6dffd6ea5627cfb04fbc5653d0e3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceatrip_1a574f187428c0e46270abd5331fdd729a" kindref="member">ABCTuples</ref></type>
        <definition>ABCTuples atrip::getAllTuplesList</definition>
        <argsstring>(const size_t Nv)</argsstring>
        <name>getAllTuplesList</name>
        <qualifiedname>atrip::getAllTuplesList</qualifiedname>
        <param>
          <type>const size_t</type>
          <declname>Nv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Tuples.hpp" line="192" column="11" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Tuples.hpp" bodystart="192" bodyend="204"/>
        <referencedby refid="namespaceatrip_1_1group__and__sort_1a4e0708f21a913d72d93cc5feb5bd9328" compoundref="Tuples_8hpp" startline="430" endline="536">atrip::group_and_sort::main</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1a6a50c8632daf83dc3a61bbc6c2eb122a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void atrip::sliceIntoVector</definition>
        <argsstring>(std::vector&lt; F &gt; &amp;v, CTF::Tensor&lt; F &gt; &amp;toSlice, std::vector&lt; int64_t &gt; const low, std::vector&lt; int64_t &gt; const up, CTF::Tensor&lt; F &gt; const &amp;origin, std::vector&lt; int64_t &gt; const originLow, std::vector&lt; int64_t &gt; const originUp)</argsstring>
        <name>sliceIntoVector</name>
        <qualifiedname>atrip::sliceIntoVector</qualifiedname>
        <param>
          <type>std::vector&lt; F &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>CTF::Tensor&lt; F &gt; &amp;</type>
          <declname>toSlice</declname>
        </param>
        <param>
          <type>std::vector&lt; int64_t &gt; const</type>
          <declname>low</declname>
        </param>
        <param>
          <type>std::vector&lt; int64_t &gt; const</type>
          <declname>up</declname>
        </param>
        <param>
          <type>CTF::Tensor&lt; F &gt; const &amp;</type>
          <declname>origin</declname>
        </param>
        <param>
          <type>std::vector&lt; int64_t &gt; const</type>
          <declname>originLow</declname>
        </param>
        <param>
          <type>std::vector&lt; int64_t &gt; const</type>
          <declname>originUp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Unions.hpp" line="22" column="8" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Unions.hpp" bodystart="23" bodyend="57"/>
        <references refid="namespaceatrip_1a3178eea10b83bd01a95ca222be291c1f" compoundref="Utils_8hpp" startline="54" endline="60">pretty_print</references>
        <references refid="Debug_8hpp_1a321f8f2fd92f00a4da2fe732c4198132" compoundref="Debug_8hpp" startline="67">WITH_OCD</references>
        <references refid="Debug_8hpp_1a3f86e6b81edd7297ee6f9fd44cba3149" compoundref="Debug_8hpp" startline="70">WITH_RANK</references>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1a3178eea10b83bd01a95ca222be291c1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string atrip::pretty_print</definition>
        <argsstring>(T &amp;&amp;value)</argsstring>
        <name>pretty_print</name>
        <qualifiedname>atrip::pretty_print</qualifiedname>
        <param>
          <type>T &amp;&amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Utils.hpp" line="54" column="15" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Utils.hpp" bodystart="54" bodyend="60"/>
        <references refid="namespaceatrip_1a3178eea10b83bd01a95ca222be291c1f" compoundref="Utils_8hpp" startline="54" endline="60">pretty_print</references>
        <referencedby refid="classatrip_1_1SliceUnion_1acd3fd6a31d2e3157805f1b1e0f281276" compoundref="SliceUnion_8hpp" startline="85" endline="251">atrip::SliceUnion&lt; F &gt;::buildLocalDatabase</referencedby>
        <referencedby refid="classatrip_1_1SliceUnion_1aca27aa90aacd05da2449e6744f74d135" compoundref="SliceUnion_8hpp" startline="259" endline="384">atrip::SliceUnion&lt; F &gt;::clearUnusedSlicesForNext</referencedby>
        <referencedby refid="structatrip_1_1Slice_1aac3a4c4281d2ff9e3c2a0060d3a5aa4a" compoundref="Slice_8hpp" startline="327" endline="346">atrip::Slice&lt; F &gt;::findByInfo</referencedby>
        <referencedby refid="structatrip_1_1Slice_1ab57c0d9c391694a84abe5327cd5fa1b4" compoundref="Slice_8hpp" startline="298" endline="323">atrip::Slice&lt; F &gt;::findByTypeAbc</referencedby>
        <referencedby refid="structatrip_1_1Slice_1a48b37b45f3c9c1bd7b74d0370354a12b" compoundref="Slice_8hpp" startline="272" endline="293">atrip::Slice&lt; F &gt;::findRecycledSource</referencedby>
        <referencedby refid="namespaceatrip_1a3178eea10b83bd01a95ca222be291c1f" compoundref="Utils_8hpp" startline="54" endline="60">pretty_print</referencedby>
        <referencedby refid="structatrip_1_1Atrip_1ac414d43de30968cc92a6f7a44e5cd9b6" compoundref="Atrip_8cxx" startline="55" endline="811">atrip::Atrip::run</referencedby>
        <referencedby refid="namespaceatrip_1a6a50c8632daf83dc3a61bbc6c2eb122a" compoundref="Unions_8hpp" startline="23" endline="57">sliceIntoVector</referencedby>
        <referencedby refid="classatrip_1_1SliceUnion_1af8b26c4affb8cc43e09315c07272c9d9" compoundref="SliceUnion_8hpp" startline="544" endline="586">atrip::SliceUnion&lt; F &gt;::unwrapSlice</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/atrip/atrip/src/atrip/Blas.cxx" line="37" column="1"/>
  </compounddef>
</doxygen>
