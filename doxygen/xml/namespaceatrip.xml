<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="namespaceatrip" kind="namespace" language="C++">
    <compoundname>atrip</compoundname>
    <innerclass refid="structatrip_1_1ABHH" prot="public">atrip::ABHH</innerclass>
    <innerclass refid="structatrip_1_1ABPH" prot="public">atrip::ABPH</innerclass>
    <innerclass refid="structatrip_1_1Atrip" prot="public">atrip::Atrip</innerclass>
    <innerclass refid="structatrip_1_1Checkpoint" prot="public">atrip::Checkpoint</innerclass>
    <innerclass refid="structatrip_1_1ClusterInfo" prot="public">atrip::ClusterInfo</innerclass>
    <innerclass refid="structatrip_1_1HHHA" prot="public">atrip::HHHA</innerclass>
    <innerclass refid="structatrip_1_1IterationDescription" prot="public">atrip::IterationDescription</innerclass>
    <innerclass refid="structatrip_1_1NaiveDistribution" prot="public">atrip::NaiveDistribution</innerclass>
    <innerclass refid="structatrip_1_1RankInfo" prot="public">atrip::RankInfo</innerclass>
    <innerclass refid="structatrip_1_1RankMap" prot="public">atrip::RankMap</innerclass>
    <innerclass refid="structatrip_1_1Slice" prot="public">atrip::Slice</innerclass>
    <innerclass refid="structatrip_1_1SliceUnion" prot="public">atrip::SliceUnion</innerclass>
    <innerclass refid="structatrip_1_1TABHH" prot="public">atrip::TABHH</innerclass>
    <innerclass refid="structatrip_1_1TAPHH" prot="public">atrip::TAPHH</innerclass>
    <innerclass refid="structatrip_1_1Timer" prot="public">atrip::Timer</innerclass>
    <innerclass refid="structatrip_1_1TuplesDistribution" prot="public">atrip::TuplesDistribution</innerclass>
    <innernamespace refid="namespaceatrip_1_1group__and__sort">atrip::group_and_sort</innernamespace>
    <innernamespace refid="namespaceatrip_1_1traits">atrip::traits</innernamespace>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespaceatrip_1aa4158a2e7e79c518dcb11d7ccfc1c82f" prot="public" static="no">
        <type>std::complex&lt; double &gt;</type>
        <definition>using atrip::Complex = typedef std::complex&lt;double&gt;</definition>
        <argsstring></argsstring>
        <name>Complex</name>
        <qualifiedname>atrip::Complex</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Blas.hpp" line="19" column="3" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Blas.hpp" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceatrip_1af4afd47789d6e8e39ce3886578386d6d" prot="public" static="no">
        <type>std::function&lt; void(<ref refid="structatrip_1_1IterationDescription" kindref="compound">IterationDescription</ref> const  &amp;)&gt;</type>
        <definition>using atrip::IterationDescriptor = typedef std::function&lt;void(IterationDescription const&amp;)&gt;</definition>
        <argsstring></argsstring>
        <name>IterationDescriptor</name>
        <qualifiedname>atrip::IterationDescriptor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Debug.hpp" line="95" column="3" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Debug.hpp" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceatrip_1a28915c100861c4b2a8c868a4b8f1f233" prot="public" static="no">
        <type>std::array&lt; size_t, 3 &gt;</type>
        <definition>using atrip::ABCTuple = typedef std::array&lt;size_t, 3&gt;</definition>
        <argsstring></argsstring>
        <name>ABCTuple</name>
        <qualifiedname>atrip::ABCTuple</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Tuples.hpp" line="39" column="1" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Tuples.hpp" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceatrip_1a8b97b58a2469967c1a6da53511879c7b" prot="public" static="no">
        <type>std::array&lt; size_t, 2 &gt;</type>
        <definition>using atrip::PartialTuple = typedef std::array&lt;size_t, 2&gt;</definition>
        <argsstring></argsstring>
        <name>PartialTuple</name>
        <qualifiedname>atrip::PartialTuple</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Tuples.hpp" line="40" column="1" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Tuples.hpp" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceatrip_1a42323fc6890662eefe0e071ada4748ea" prot="public" static="no">
        <type>std::vector&lt; <ref refid="namespaceatrip_1a28915c100861c4b2a8c868a4b8f1f233" kindref="member">ABCTuple</ref> &gt;</type>
        <definition>using atrip::ABCTuples = typedef std::vector&lt;ABCTuple&gt;</definition>
        <argsstring></argsstring>
        <name>ABCTuples</name>
        <qualifiedname>atrip::ABCTuples</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Tuples.hpp" line="41" column="1" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Tuples.hpp" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceatrip_1aec2fd4244568d19e92eb8d89425f1376" prot="public" static="no">
        <type>std::map&lt; std::string, <ref refid="structatrip_1_1Timer" kindref="compound">Timer</ref> &gt;</type>
        <definition>using atrip::Timings = typedef std::map&lt;std::string, Timer&gt;</definition>
        <argsstring></argsstring>
        <name>Timings</name>
        <qualifiedname>atrip::Timings</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Utils.hpp" line="62" column="1" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Utils.hpp" bodystart="62" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespaceatrip_1a341e9614e55178a8e9537898f42ac636" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="namespaceatrip_1a28915c100861c4b2a8c868a4b8f1f233" kindref="member">ABCTuple</ref></type>
        <definition>constexpr ABCTuple atrip::FAKE_TUPLE</definition>
        <argsstring></argsstring>
        <name>FAKE_TUPLE</name>
        <qualifiedname>atrip::FAKE_TUPLE</qualifiedname>
        <initializer>= {0, 0, 0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Tuples.hpp" line="43" column="20" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Tuples.hpp" bodystart="43" bodyend="-1"/>
        <referencedby refid="namespaceatrip_1a6d24cef8b67603413dfae0002a083b95" compoundref="Tuples_8hpp" startline="158" endline="188">getTuplesList</referencedby>
        <referencedby refid="namespaceatrip_1_1group__and__sort_1a4e0708f21a913d72d93cc5feb5bd9328" compoundref="Tuples_8hpp" startline="430" endline="536">atrip::group_and_sort::main</referencedby>
        <referencedby refid="structatrip_1_1TuplesDistribution_1a0767a603e2865fef7d6a8cc9bf41c52a" compoundref="Tuples_8hpp" startline="50" endline="50">atrip::TuplesDistribution::tupleIsFake</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespaceatrip_1a4eb1a1b9186ce3cd1fae39cd044aaf29" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="namespaceatrip_1a28915c100861c4b2a8c868a4b8f1f233" kindref="member">ABCTuple</ref></type>
        <definition>constexpr ABCTuple atrip::INVALID_TUPLE</definition>
        <argsstring></argsstring>
        <name>INVALID_TUPLE</name>
        <qualifiedname>atrip::INVALID_TUPLE</qualifiedname>
        <initializer>= {1, 1, 1}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Tuples.hpp" line="44" column="20" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Tuples.hpp" bodystart="44" bodyend="-1"/>
        <referencedby refid="namespaceatrip_1_1group__and__sort_1a9285b4e63c38f7c586f8ba185e5fa2e9" compoundref="Tuples_8hpp" startline="248" endline="426">atrip::group_and_sort::specialDistribution</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceatrip_1a302b648f916e8ad102dd42072cca699f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void atrip::dgemm_</definition>
        <argsstring>(const char *transa, const char *transb, const int *m, const int *n, const int *k, double *alpha, const double *a, const int *lda, const double *b, const int *ldb, double *beta, double *c, const int *ldc)</argsstring>
        <name>dgemm_</name>
        <qualifiedname>atrip::dgemm_</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>transa</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>transb</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>k</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>lda</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>ldb</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>ldc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Blas.hpp" line="22" column="10" declfile="/home/runner/work/atrip/atrip/include/atrip/Blas.hpp" declline="22" declcolumn="10"/>
        <referencedby refid="namespaceatrip_1ac816a227aaf7dcd0a1924bcbabedcd05" compoundref="Blas_8hpp" startline="57" endline="75">xgemm</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1a7dbace53db67d2fe7117fd8d401a714a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void atrip::zgemm_</definition>
        <argsstring>(const char *transa, const char *transb, const int *m, const int *n, const int *k, Complex *alpha, const Complex *A, const int *lda, const Complex *B, const int *ldb, Complex *beta, Complex *C, const int *ldc)</argsstring>
        <name>zgemm_</name>
        <qualifiedname>atrip::zgemm_</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>transa</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>transb</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1aa4158a2e7e79c518dcb11d7ccfc1c82f" kindref="member">Complex</ref> *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceatrip_1aa4158a2e7e79c518dcb11d7ccfc1c82f" kindref="member">Complex</ref> *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>lda</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceatrip_1aa4158a2e7e79c518dcb11d7ccfc1c82f" kindref="member">Complex</ref> *</type>
          <declname>B</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>ldb</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1aa4158a2e7e79c518dcb11d7ccfc1c82f" kindref="member">Complex</ref> *</type>
          <declname>beta</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1aa4158a2e7e79c518dcb11d7ccfc1c82f" kindref="member">Complex</ref> *</type>
          <declname>C</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>ldc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Blas.hpp" line="38" column="10" declfile="/home/runner/work/atrip/atrip/include/atrip/Blas.hpp" declline="38" declcolumn="10"/>
        <referencedby refid="namespaceatrip_1a598533b252b76257af9d6d6e7c285db2" compoundref="Blas_8hpp" startline="78" endline="96">xgemm</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1ac816a227aaf7dcd0a1924bcbabedcd05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void atrip::xgemm</definition>
        <argsstring>(const char *transa, const char *transb, const int *m, const int *n, const int *k, F *alpha, const F *A, const int *lda, const F *B, const int *ldb, F *beta, F *C, const int *ldc)</argsstring>
        <name>xgemm</name>
        <qualifiedname>atrip::xgemm</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>transa</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>transb</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>k</declname>
        </param>
        <param>
          <type>F *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const F *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>lda</declname>
        </param>
        <param>
          <type>const F *</type>
          <declname>B</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>ldb</declname>
        </param>
        <param>
          <type>F *</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>F *</type>
          <declname>C</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>ldc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Blas.hpp" line="57" column="8" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Blas.hpp" bodystart="57" bodyend="75"/>
        <references refid="namespaceatrip_1a302b648f916e8ad102dd42072cca699f">dgemm_</references>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1a598533b252b76257af9d6d6e7c285db2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void atrip::xgemm</definition>
        <argsstring>(const char *transa, const char *transb, const int *m, const int *n, const int *k, Complex *alpha, const Complex *A, const int *lda, const Complex *B, const int *ldb, Complex *beta, Complex *C, const int *ldc)</argsstring>
        <name>xgemm</name>
        <qualifiedname>atrip::xgemm</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>transa</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>transb</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1aa4158a2e7e79c518dcb11d7ccfc1c82f" kindref="member">Complex</ref> *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceatrip_1aa4158a2e7e79c518dcb11d7ccfc1c82f" kindref="member">Complex</ref> *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>lda</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceatrip_1aa4158a2e7e79c518dcb11d7ccfc1c82f" kindref="member">Complex</ref> *</type>
          <declname>B</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>ldb</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1aa4158a2e7e79c518dcb11d7ccfc1c82f" kindref="member">Complex</ref> *</type>
          <declname>beta</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1aa4158a2e7e79c518dcb11d7ccfc1c82f" kindref="member">Complex</ref> *</type>
          <declname>C</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>ldc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Blas.hpp" line="78" column="8" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Blas.hpp" bodystart="78" bodyend="96"/>
        <references refid="namespaceatrip_1a7dbace53db67d2fe7117fd8d401a714a">zgemm_</references>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1a5b178d65b82630d40ed38d9ccd86e2a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void atrip::write_checkpoint</definition>
        <argsstring>(Checkpoint const &amp;c, std::string const &amp;filepath)</argsstring>
        <name>write_checkpoint</name>
        <qualifiedname>atrip::write_checkpoint</qualifiedname>
        <param>
          <type><ref refid="structatrip_1_1Checkpoint" kindref="compound">Checkpoint</ref> const &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>filepath</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Checkpoint.hpp" line="40" column="6" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Checkpoint.hpp" bodystart="40" bodyend="56"/>
        <references refid="structatrip_1_1Checkpoint_1a3a8108da62e957ebe63f7a0020b5b055" compoundref="Checkpoint_8hpp" startline="31">atrip::Checkpoint::energy</references>
        <references refid="structatrip_1_1Checkpoint_1abb5df4833497679ea0659f62fd534506" compoundref="Checkpoint_8hpp" startline="32">atrip::Checkpoint::iteration</references>
        <references refid="structatrip_1_1Checkpoint_1ace368565e89f5f2532a58e51d0eccd1b" compoundref="Checkpoint_8hpp" startline="30">atrip::Checkpoint::nnodes</references>
        <references refid="structatrip_1_1Checkpoint_1aa65e33f6fbeb680cd164b3adf559566c" compoundref="Checkpoint_8hpp" startline="28">atrip::Checkpoint::no</references>
        <references refid="structatrip_1_1Checkpoint_1a58134223c7e2ff5a6608c3d55c1c8682" compoundref="Checkpoint_8hpp" startline="29">atrip::Checkpoint::nranks</references>
        <references refid="structatrip_1_1Checkpoint_1a508d48ea8613cc353cc4e2df6619087b" compoundref="Checkpoint_8hpp" startline="28">atrip::Checkpoint::nv</references>
        <references refid="structatrip_1_1Checkpoint_1a6007a0e5cc2cbbec3c4cba70b368777a" compoundref="Checkpoint_8hpp" startline="35">atrip::Checkpoint::rankRoundRobin</references>
        <referencedby refid="structatrip_1_1Atrip_1ac414d43de30968cc92a6f7a44e5cd9b6" compoundref="Atrip_8cxx" startline="48" endline="643">atrip::Atrip::run</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1a0e552094c9b3e3af0d38faf48a47a3db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structatrip_1_1Checkpoint" kindref="compound">Checkpoint</ref></type>
        <definition>Checkpoint atrip::read_checkpoint</definition>
        <argsstring>(std::ifstream &amp;in)</argsstring>
        <name>read_checkpoint</name>
        <qualifiedname>atrip::read_checkpoint</qualifiedname>
        <param>
          <type>std::ifstream &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Checkpoint.hpp" line="59" column="12" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Checkpoint.hpp" bodystart="59" bodyend="81"/>
        <references refid="structatrip_1_1Checkpoint_1a3a8108da62e957ebe63f7a0020b5b055" compoundref="Checkpoint_8hpp" startline="31">atrip::Checkpoint::energy</references>
        <references refid="structatrip_1_1Checkpoint_1abb5df4833497679ea0659f62fd534506" compoundref="Checkpoint_8hpp" startline="32">atrip::Checkpoint::iteration</references>
        <references refid="structatrip_1_1Checkpoint_1ace368565e89f5f2532a58e51d0eccd1b" compoundref="Checkpoint_8hpp" startline="30">atrip::Checkpoint::nnodes</references>
        <references refid="structatrip_1_1Checkpoint_1aa65e33f6fbeb680cd164b3adf559566c" compoundref="Checkpoint_8hpp" startline="28">atrip::Checkpoint::no</references>
        <references refid="structatrip_1_1Checkpoint_1a58134223c7e2ff5a6608c3d55c1c8682" compoundref="Checkpoint_8hpp" startline="29">atrip::Checkpoint::nranks</references>
        <references refid="structatrip_1_1Checkpoint_1a508d48ea8613cc353cc4e2df6619087b" compoundref="Checkpoint_8hpp" startline="28">atrip::Checkpoint::nv</references>
        <references refid="structatrip_1_1Checkpoint_1a6007a0e5cc2cbbec3c4cba70b368777a" compoundref="Checkpoint_8hpp" startline="35">atrip::Checkpoint::rankRoundRobin</references>
        <referencedby refid="namespaceatrip_1acb8c08d5972eb89777650317e5b765d2" compoundref="Checkpoint_8hpp" startline="84" endline="87">read_checkpoint</referencedby>
        <referencedby refid="structatrip_1_1Atrip_1ac414d43de30968cc92a6f7a44e5cd9b6" compoundref="Atrip_8cxx" startline="48" endline="643">atrip::Atrip::run</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1acb8c08d5972eb89777650317e5b765d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structatrip_1_1Checkpoint" kindref="compound">Checkpoint</ref></type>
        <definition>Checkpoint atrip::read_checkpoint</definition>
        <argsstring>(std::string const &amp;filepath)</argsstring>
        <name>read_checkpoint</name>
        <qualifiedname>atrip::read_checkpoint</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>filepath</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Checkpoint.hpp" line="84" column="12" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Checkpoint.hpp" bodystart="84" bodyend="87"/>
        <references refid="namespaceatrip_1a0e552094c9b3e3af0d38faf48a47a3db" compoundref="Checkpoint_8hpp" startline="59" endline="81">read_checkpoint</references>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1a65234e51491c3fa418fcdfeb6e51ee1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void atrip::registerIterationDescriptor</definition>
        <argsstring>(IterationDescriptor)</argsstring>
        <name>registerIterationDescriptor</name>
        <qualifiedname>atrip::registerIterationDescriptor</qualifiedname>
        <param>
          <type><ref refid="namespaceatrip_1af4afd47789d6e8e39ce3886578386d6d" kindref="member">IterationDescriptor</ref></type>
          <defname>d</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Debug.hpp" line="103" column="8" bodyfile="/home/runner/work/atrip/atrip/src/atrip/Atrip.cxx" bodystart="37" bodyend="39" declfile="/home/runner/work/atrip/atrip/include/atrip/Debug.hpp" declline="103" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1a840b02bd30fe9a856766d3d46549cada" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double atrip::getEnergyDistinct</definition>
        <argsstring>(const F epsabc, std::vector&lt; F &gt; const &amp;epsi, std::vector&lt; F &gt; const &amp;Tijk_, std::vector&lt; F &gt; const &amp;Zijk_)</argsstring>
        <name>getEnergyDistinct</name>
        <qualifiedname>atrip::getEnergyDistinct</qualifiedname>
        <param>
          <type>const F</type>
          <declname>epsabc</declname>
        </param>
        <param>
          <type>std::vector&lt; F &gt; const &amp;</type>
          <declname>epsi</declname>
        </param>
        <param>
          <type>std::vector&lt; F &gt; const &amp;</type>
          <declname>Tijk_</declname>
        </param>
        <param>
          <type>std::vector&lt; F &gt; const &amp;</type>
          <declname>Zijk_</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Equations.hpp" line="24" column="10" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Equations.hpp" bodystart="25" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1a793b8f00a013edaba6f2085ef13639b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double atrip::getEnergySame</definition>
        <argsstring>(const F epsabc, std::vector&lt; F &gt; const &amp;epsi, std::vector&lt; F &gt; const &amp;Tijk_, std::vector&lt; F &gt; const &amp;Zijk_)</argsstring>
        <name>getEnergySame</name>
        <qualifiedname>atrip::getEnergySame</qualifiedname>
        <param>
          <type>const F</type>
          <declname>epsabc</declname>
        </param>
        <param>
          <type>std::vector&lt; F &gt; const &amp;</type>
          <declname>epsi</declname>
        </param>
        <param>
          <type>std::vector&lt; F &gt; const &amp;</type>
          <declname>Tijk_</declname>
        </param>
        <param>
          <type>std::vector&lt; F &gt; const &amp;</type>
          <declname>Zijk_</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Equations.hpp" line="89" column="10" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Equations.hpp" bodystart="90" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1a7787d4c4d5eaa1b23f1a38fd77452e91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void atrip::singlesContribution</definition>
        <argsstring>(size_t No, size_t Nv, const ABCTuple &amp;abc, F const *Tph, F const *VABij, F const *VACij, F const *VBCij, F *Zijk)</argsstring>
        <name>singlesContribution</name>
        <qualifiedname>atrip::singlesContribution</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>No</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>Nv</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceatrip_1a28915c100861c4b2a8c868a4b8f1f233" kindref="member">ABCTuple</ref> &amp;</type>
          <declname>abc</declname>
        </param>
        <param>
          <type>F const *</type>
          <declname>Tph</declname>
        </param>
        <param>
          <type>F const *</type>
          <declname>VABij</declname>
        </param>
        <param>
          <type>F const *</type>
          <declname>VACij</declname>
        </param>
        <param>
          <type>F const *</type>
          <declname>VBCij</declname>
        </param>
        <param>
          <type>F *</type>
          <declname>Zijk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Equations.hpp" line="140" column="8" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Equations.hpp" bodystart="141" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1abf38977bde26414f9921b16ea94e61a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void atrip::doublesContribution</definition>
        <argsstring>(const ABCTuple &amp;abc, size_t const No, size_t const Nv, F const *VABph, F const *VACph, F const *VBCph, F const *VBAph, F const *VCAph, F const *VCBph, F const *VhhhA, F const *VhhhB, F const *VhhhC, F const *TAphh, F const *TBphh, F const *TCphh, F const *TABhh, F const *TAChh, F const *TBChh, F *Tijk)</argsstring>
        <name>doublesContribution</name>
        <qualifiedname>atrip::doublesContribution</qualifiedname>
        <param>
          <type>const <ref refid="namespaceatrip_1a28915c100861c4b2a8c868a4b8f1f233" kindref="member">ABCTuple</ref> &amp;</type>
          <declname>abc</declname>
        </param>
        <param>
          <type>size_t const</type>
          <declname>No</declname>
        </param>
        <param>
          <type>size_t const</type>
          <declname>Nv</declname>
        </param>
        <param>
          <type>F const *</type>
          <declname>VABph</declname>
        </param>
        <param>
          <type>F const *</type>
          <declname>VACph</declname>
        </param>
        <param>
          <type>F const *</type>
          <declname>VBCph</declname>
        </param>
        <param>
          <type>F const *</type>
          <declname>VBAph</declname>
        </param>
        <param>
          <type>F const *</type>
          <declname>VCAph</declname>
        </param>
        <param>
          <type>F const *</type>
          <declname>VCBph</declname>
        </param>
        <param>
          <type>F const *</type>
          <declname>VhhhA</declname>
        </param>
        <param>
          <type>F const *</type>
          <declname>VhhhB</declname>
        </param>
        <param>
          <type>F const *</type>
          <declname>VhhhC</declname>
        </param>
        <param>
          <type>F const *</type>
          <declname>TAphh</declname>
        </param>
        <param>
          <type>F const *</type>
          <declname>TBphh</declname>
        </param>
        <param>
          <type>F const *</type>
          <declname>TCphh</declname>
        </param>
        <param>
          <type>F const *</type>
          <declname>TABhh</declname>
        </param>
        <param>
          <type>F const *</type>
          <declname>TAChh</declname>
        </param>
        <param>
          <type>F const *</type>
          <declname>TBChh</declname>
        </param>
        <param>
          <type>F *</type>
          <declname>Tijk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Equations.hpp" line="164" column="8" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Equations.hpp" bodystart="165" bodyend="379"/>
        <references refid="Equations_8hpp_1a395c02ccca573561c1c6e5a2145c496b">_IJK_</references>
        <references refid="Equations_8hpp_1a178706b091c61817a72573aea44e95fa">DGEMM_HOLES</references>
        <references refid="Equations_8hpp_1aaa57263b7876787581e36f91522c81e7">DGEMM_PARTICLES</references>
        <references refid="Equations_8hpp_1ae116a1c74783cc9363dbd6e2eb934ea8">MAYBE_CONJ</references>
        <references refid="Equations_8hpp_1a8e804de074eaa56f17a152fb93eaae00">REORDER</references>
        <references refid="Utils_8hpp_1a684c98edc7c431d9fa25c1d75ae42f83" compoundref="Utils_8hpp" startline="47">WITH_CHRONO</references>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1a2e0cfc31bb96f193faaf7577e9d8ff86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FF</type>
          </param>
        </templateparamlist>
        <type>FF</type>
        <definition>FF atrip::maybeConjugate</definition>
        <argsstring>(const FF a)</argsstring>
        <name>maybeConjugate</name>
        <qualifiedname>atrip::maybeConjugate</qualifiedname>
        <param>
          <type>const FF</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Slice.hpp" line="28" column="16" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Slice.hpp" bodystart="28" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1a3109af0495d84e38227d528cd87b4bbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="namespaceatrip_1aa4158a2e7e79c518dcb11d7ccfc1c82f" kindref="member">Complex</ref></type>
        <definition>Complex atrip::maybeConjugate</definition>
        <argsstring>(const Complex a)</argsstring>
        <name>maybeConjugate</name>
        <qualifiedname>atrip::maybeConjugate</qualifiedname>
        <param>
          <type>const <ref refid="namespaceatrip_1aa4158a2e7e79c518dcb11d7ccfc1c82f" kindref="member">Complex</ref></type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Slice.hpp" line="29" column="20" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Slice.hpp" bodystart="29" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1a36ea310b3a29e6d68402251cedf5e542" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; atrip::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, typename Slice&lt; F &gt;::Location const &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>atrip::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>typename <ref refid="structatrip_1_1Slice" kindref="compound">Slice</ref>&lt; F &gt;::Location const &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Slice.hpp" line="490" column="1" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Slice.hpp" bodystart="490" bodyend="494"/>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1a425e1a9ba33666dec82fd4575664a48f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; atrip::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, typename Slice&lt; F &gt;::Info const &amp;i)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>atrip::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>typename <ref refid="structatrip_1_1Slice" kindref="compound">Slice</ref>&lt; F &gt;::Info const &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Slice.hpp" line="497" column="1" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Slice.hpp" bodystart="497" bodyend="504"/>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1ab93cbc0ed3ae01101d887207e3032916" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structatrip_1_1SliceUnion" kindref="compound">SliceUnion</ref>&lt; F &gt; &amp;</type>
        <definition>SliceUnion&lt; F &gt; &amp; atrip::unionByName</definition>
        <argsstring>(std::vector&lt; SliceUnion&lt; F &gt; * &gt; const &amp;unions, typename Slice&lt; F &gt;::Name name)</argsstring>
        <name>unionByName</name>
        <qualifiedname>atrip::unionByName</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="structatrip_1_1SliceUnion" kindref="compound">SliceUnion</ref>&lt; F &gt; * &gt; const &amp;</type>
          <declname>unions</declname>
        </param>
        <param>
          <type>typename <ref refid="structatrip_1_1Slice" kindref="compound">Slice</ref>&lt; F &gt;::Name</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/SliceUnion.hpp" line="557" column="3" bodyfile="/home/runner/work/atrip/atrip/include/atrip/SliceUnion.hpp" bodystart="557" bodyend="570"/>
        <referencedby refid="structatrip_1_1Atrip_1ac414d43de30968cc92a6f7a44e5cd9b6" compoundref="Atrip_8cxx" startline="48" endline="643">atrip::Atrip::run</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1adf9f0314b16a7dc5e7c7d47c622a1338" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; atrip::getNodeNames</definition>
        <argsstring>(MPI_Comm comm)</argsstring>
        <name>getNodeNames</name>
        <qualifiedname>atrip::getNodeNames</qualifiedname>
        <param>
          <type>MPI_Comm</type>
          <declname>comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Tuples.hpp" line="55" column="13" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Tuples.hpp" bodystart="55" bodyend="91"/>
        <referencedby refid="namespaceatrip_1af9fd13d6ed4a11730462a362543d6e26" compoundref="Tuples_8hpp" startline="143" endline="154">getClusterInfo</referencedby>
        <referencedby refid="namespaceatrip_1_1group__and__sort_1a4e0708f21a913d72d93cc5feb5bd9328" compoundref="Tuples_8hpp" startline="430" endline="536">atrip::group_and_sort::main</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1a97dd69bc4fe50212652f17f2e6bd04fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename A</type>
          </param>
        </templateparamlist>
        <type>A</type>
        <definition>A atrip::unique</definition>
        <argsstring>(A const &amp;xs)</argsstring>
        <name>unique</name>
        <qualifiedname>atrip::unique</qualifiedname>
        <param>
          <type>A const &amp;</type>
          <declname>xs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Tuples.hpp" line="104" column="3" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Tuples.hpp" bodystart="104" bodyend="110"/>
        <references refid="namespaceatrip_1a97dd69bc4fe50212652f17f2e6bd04fb" compoundref="Tuples_8hpp" startline="104" endline="110">unique</references>
        <referencedby refid="namespaceatrip_1af9fd13d6ed4a11730462a362543d6e26" compoundref="Tuples_8hpp" startline="143" endline="154">getClusterInfo</referencedby>
        <referencedby refid="namespaceatrip_1a3cdba26c5e1b49fd5a9359658484e1f0" compoundref="Tuples_8hpp" startline="113" endline="135">getNodeInfos</referencedby>
        <referencedby refid="namespaceatrip_1_1group__and__sort_1a64e55f94387e9330b4afdb3e6a6d5556" compoundref="Tuples_8hpp" startline="232" endline="239">atrip::group_and_sort::getTupleNodes</referencedby>
        <referencedby refid="namespaceatrip_1_1group__and__sort_1a4e0708f21a913d72d93cc5feb5bd9328" compoundref="Tuples_8hpp" startline="430" endline="536">atrip::group_and_sort::main</referencedby>
        <referencedby refid="namespaceatrip_1a97dd69bc4fe50212652f17f2e6bd04fb" compoundref="Tuples_8hpp" startline="104" endline="110">unique</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1a3cdba26c5e1b49fd5a9359658484e1f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="structatrip_1_1RankInfo" kindref="compound">RankInfo</ref> &gt;</type>
        <definition>std::vector&lt; RankInfo &gt; atrip::getNodeInfos</definition>
        <argsstring>(std::vector&lt; string &gt; const &amp;nodeNames)</argsstring>
        <name>getNodeInfos</name>
        <qualifiedname>atrip::getNodeInfos</qualifiedname>
        <param>
          <type>std::vector&lt; string &gt; const &amp;</type>
          <declname>nodeNames</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Tuples.hpp" line="113" column="1" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Tuples.hpp" bodystart="113" bodyend="135"/>
        <references refid="namespaceatrip_1a97dd69bc4fe50212652f17f2e6bd04fb" compoundref="Tuples_8hpp" startline="104" endline="110">unique</references>
        <referencedby refid="namespaceatrip_1af9fd13d6ed4a11730462a362543d6e26" compoundref="Tuples_8hpp" startline="143" endline="154">getClusterInfo</referencedby>
        <referencedby refid="namespaceatrip_1_1group__and__sort_1a4e0708f21a913d72d93cc5feb5bd9328" compoundref="Tuples_8hpp" startline="430" endline="536">atrip::group_and_sort::main</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1af9fd13d6ed4a11730462a362543d6e26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structatrip_1_1ClusterInfo" kindref="compound">ClusterInfo</ref></type>
        <definition>ClusterInfo atrip::getClusterInfo</definition>
        <argsstring>(MPI_Comm comm)</argsstring>
        <name>getClusterInfo</name>
        <qualifiedname>atrip::getClusterInfo</qualifiedname>
        <param>
          <type>MPI_Comm</type>
          <declname>comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Tuples.hpp" line="143" column="1" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Tuples.hpp" bodystart="143" bodyend="154"/>
        <references refid="namespaceatrip_1a3cdba26c5e1b49fd5a9359658484e1f0" compoundref="Tuples_8hpp" startline="113" endline="135">getNodeInfos</references>
        <references refid="namespaceatrip_1adf9f0314b16a7dc5e7c7d47c622a1338" compoundref="Tuples_8hpp" startline="55" endline="91">getNodeNames</references>
        <references refid="namespaceatrip_1a97dd69bc4fe50212652f17f2e6bd04fb" compoundref="Tuples_8hpp" startline="104" endline="110">unique</references>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1a6d24cef8b67603413dfae0002a083b95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceatrip_1a42323fc6890662eefe0e071ada4748ea" kindref="member">ABCTuples</ref></type>
        <definition>ABCTuples atrip::getTuplesList</definition>
        <argsstring>(size_t Nv, size_t rank, size_t np)</argsstring>
        <name>getTuplesList</name>
        <qualifiedname>atrip::getTuplesList</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>Nv</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>rank</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>np</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Tuples.hpp" line="158" column="11" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Tuples.hpp" bodystart="158" bodyend="188"/>
        <references refid="namespaceatrip_1a341e9614e55178a8e9537898f42ac636" compoundref="Tuples_8hpp" startline="43">FAKE_TUPLE</references>
        <references refid="Debug_8hpp_1aab91ba8612c2b67dad4376d30871eb95" compoundref="Debug_8hpp" startline="80">LOG</references>
        <references refid="Debug_8hpp_1a3f86e6b81edd7297ee6f9fd44cba3149" compoundref="Debug_8hpp" startline="71">WITH_RANK</references>
        <referencedby refid="structatrip_1_1NaiveDistribution_1aeb41c2a6f7086e9085d0dbd93e103d39" compoundref="Tuples_8hpp" startline="209" endline="214">atrip::NaiveDistribution::getTuples</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1ad3b6dffd6ea5627cfb04fbc5653d0e3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceatrip_1a42323fc6890662eefe0e071ada4748ea" kindref="member">ABCTuples</ref></type>
        <definition>ABCTuples atrip::getAllTuplesList</definition>
        <argsstring>(const size_t Nv)</argsstring>
        <name>getAllTuplesList</name>
        <qualifiedname>atrip::getAllTuplesList</qualifiedname>
        <param>
          <type>const size_t</type>
          <declname>Nv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Tuples.hpp" line="192" column="11" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Tuples.hpp" bodystart="192" bodyend="204"/>
        <referencedby refid="namespaceatrip_1_1group__and__sort_1a4e0708f21a913d72d93cc5feb5bd9328" compoundref="Tuples_8hpp" startline="430" endline="536">atrip::group_and_sort::main</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1a6a50c8632daf83dc3a61bbc6c2eb122a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void atrip::sliceIntoVector</definition>
        <argsstring>(std::vector&lt; F &gt; &amp;v, CTF::Tensor&lt; F &gt; &amp;toSlice, std::vector&lt; int64_t &gt; const low, std::vector&lt; int64_t &gt; const up, CTF::Tensor&lt; F &gt; const &amp;origin, std::vector&lt; int64_t &gt; const originLow, std::vector&lt; int64_t &gt; const originUp)</argsstring>
        <name>sliceIntoVector</name>
        <qualifiedname>atrip::sliceIntoVector</qualifiedname>
        <param>
          <type>std::vector&lt; F &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>CTF::Tensor&lt; F &gt; &amp;</type>
          <declname>toSlice</declname>
        </param>
        <param>
          <type>std::vector&lt; int64_t &gt; const</type>
          <declname>low</declname>
        </param>
        <param>
          <type>std::vector&lt; int64_t &gt; const</type>
          <declname>up</declname>
        </param>
        <param>
          <type>CTF::Tensor&lt; F &gt; const &amp;</type>
          <declname>origin</declname>
        </param>
        <param>
          <type>std::vector&lt; int64_t &gt; const</type>
          <declname>originLow</declname>
        </param>
        <param>
          <type>std::vector&lt; int64_t &gt; const</type>
          <declname>originUp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Unions.hpp" line="22" column="8" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Unions.hpp" bodystart="23" bodyend="57"/>
        <references refid="namespaceatrip_1a3178eea10b83bd01a95ca222be291c1f" compoundref="Utils_8hpp" startline="37" endline="43">pretty_print</references>
        <references refid="Debug_8hpp_1a321f8f2fd92f00a4da2fe732c4198132" compoundref="Debug_8hpp" startline="68">WITH_OCD</references>
        <references refid="Debug_8hpp_1a3f86e6b81edd7297ee6f9fd44cba3149" compoundref="Debug_8hpp" startline="71">WITH_RANK</references>
      </memberdef>
      <memberdef kind="function" id="namespaceatrip_1a3178eea10b83bd01a95ca222be291c1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string atrip::pretty_print</definition>
        <argsstring>(T &amp;&amp;value)</argsstring>
        <name>pretty_print</name>
        <qualifiedname>atrip::pretty_print</qualifiedname>
        <param>
          <type>T &amp;&amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Utils.hpp" line="37" column="15" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Utils.hpp" bodystart="37" bodyend="43"/>
        <references refid="namespaceatrip_1a3178eea10b83bd01a95ca222be291c1f" compoundref="Utils_8hpp" startline="37" endline="43">pretty_print</references>
        <referencedby refid="structatrip_1_1SliceUnion_1acd3fd6a31d2e3157805f1b1e0f281276" compoundref="SliceUnion_8hpp" startline="82" endline="223">atrip::SliceUnion&lt; F &gt;::buildLocalDatabase</referencedby>
        <referencedby refid="structatrip_1_1SliceUnion_1aca27aa90aacd05da2449e6744f74d135" compoundref="SliceUnion_8hpp" startline="231" endline="345">atrip::SliceUnion&lt; F &gt;::clearUnusedSlicesForNext</referencedby>
        <referencedby refid="structatrip_1_1Slice_1aac3a4c4281d2ff9e3c2a0060d3a5aa4a" compoundref="Slice_8hpp" startline="339" endline="358">atrip::Slice&lt; F &gt;::findByInfo</referencedby>
        <referencedby refid="structatrip_1_1Slice_1ab57c0d9c391694a84abe5327cd5fa1b4" compoundref="Slice_8hpp" startline="310" endline="335">atrip::Slice&lt; F &gt;::findByTypeAbc</referencedby>
        <referencedby refid="structatrip_1_1Slice_1a48b37b45f3c9c1bd7b74d0370354a12b" compoundref="Slice_8hpp" startline="284" endline="305">atrip::Slice&lt; F &gt;::findRecycledSource</referencedby>
        <referencedby refid="namespaceatrip_1a3178eea10b83bd01a95ca222be291c1f" compoundref="Utils_8hpp" startline="37" endline="43">pretty_print</referencedby>
        <referencedby refid="structatrip_1_1Atrip_1ac414d43de30968cc92a6f7a44e5cd9b6" compoundref="Atrip_8cxx" startline="48" endline="643">atrip::Atrip::run</referencedby>
        <referencedby refid="namespaceatrip_1a6a50c8632daf83dc3a61bbc6c2eb122a" compoundref="Unions_8hpp" startline="23" endline="57">sliceIntoVector</referencedby>
        <referencedby refid="structatrip_1_1SliceUnion_1a4818f008af7820a86f8b68669d69b9d0" compoundref="SliceUnion_8hpp" startline="498" endline="540">atrip::SliceUnion&lt; F &gt;::unwrapSlice</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/atrip/atrip/include/atrip/Atrip.hpp" line="32" column="1"/>
  </compounddef>
</doxygen>
