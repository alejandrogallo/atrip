<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="structatrip_1_1Slice" kind="struct" language="C++" prot="public">
    <compoundname>atrip::Slice</compoundname>
    <includes refid="Slice_8hpp" local="no">Slice.hpp</includes>
    <innerclass refid="structatrip_1_1Slice_1_1Info" prot="public">atrip::Slice::Info</innerclass>
    <innerclass refid="structatrip_1_1Slice_1_1LocalDatabaseElement" prot="public">atrip::Slice::LocalDatabaseElement</innerclass>
    <innerclass refid="structatrip_1_1Slice_1_1Location" prot="public">atrip::Slice::Location</innerclass>
    <innerclass refid="structatrip_1_1Slice_1_1mpi" prot="public">atrip::Slice::mpi</innerclass>
    <templateparamlist>
      <param>
        <type>typename F</type>
        <defval>double</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46" prot="public" static="no" strong="no">
        <type></type>
        <name>Type</name>
        <enumvalue id="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46ac37202de596dc7eb8a95a68a168750ba" prot="public">
          <name>A</name>
          <initializer>= 10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46ab0cc4fdf016372ae51b4b33f19970877" prot="public">
          <name>B</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46a4d34dab093e3bc7dc5a6afa466dfc7a3" prot="public">
          <name>C</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46a95d8dd6c535cdf180d9b78fea1dabd2c" prot="public">
          <name>AB</name>
          <initializer>= 20</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46a56b6bbbe684c42ebf26bb91d68921b42" prot="public">
          <name>BC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46aed801e2742ba2af5a55804d6e0e7613e" prot="public">
          <name>AC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46a1781b62e2b19583ea840692812d17cea" prot="public">
          <name>CB</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46a95b07e2180c2f7003f986104dfb85677" prot="public">
          <name>BA</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46a5d98c0f033fde70dd1b2d48220a4726d" prot="public">
          <name>CA</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46ac32b5c11df3f14116f3fddf2bc10a55e" prot="public">
          <name>Blank</name>
          <initializer>= 404</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Slice.hpp" line="51" column="1" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Slice.hpp" bodystart="52" bodyend="65"/>
      </memberdef>
      <memberdef kind="enum" id="structatrip_1_1Slice_1ade9f7c874828268e1cc03d5da85734a0" prot="public" static="no" strong="no">
        <type></type>
        <name>State</name>
        <enumvalue id="structatrip_1_1Slice_1ade9f7c874828268e1cc03d5da85734a0a5651eced6ec56a1720f3e315c7fad891" prot="public">
          <name>Fetch</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structatrip_1_1Slice_1ade9f7c874828268e1cc03d5da85734a0ae6d67fb1c5af3b568ab9ad22659ce152" prot="public">
          <name>Dispatched</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structatrip_1_1Slice_1ade9f7c874828268e1cc03d5da85734a0a08aec9b7b59e8a3ee12a965bf4d7afd9" prot="public">
          <name>Ready</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structatrip_1_1Slice_1ade9f7c874828268e1cc03d5da85734a0a57a108e7e6561000ac9f7d9e9b9317b9" prot="public">
          <name>SelfSufficient</name>
          <initializer>= 911</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structatrip_1_1Slice_1ade9f7c874828268e1cc03d5da85734a0af916232db704e602917e8b38720e5863" prot="public">
          <name>Recycled</name>
          <initializer>= 123</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structatrip_1_1Slice_1ade9f7c874828268e1cc03d5da85734a0a37b0da7cf0ebee6184b29c2c212574e7" prot="public">
          <name>Acceptor</name>
          <initializer>= 405</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Slice.hpp" line="69" column="1" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Slice.hpp" bodystart="69" bodyend="76"/>
      </memberdef>
      <memberdef kind="enum" id="structatrip_1_1Slice_1ab62f723a61f7d96ff457aa0980a50806" prot="public" static="no" strong="no">
        <type></type>
        <name>Name</name>
        <enumvalue id="structatrip_1_1Slice_1ab62f723a61f7d96ff457aa0980a50806a7eaa6927fdb18899e6a074efb86e8ff0" prot="public">
          <name>TA</name>
          <initializer>= 100</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structatrip_1_1Slice_1ab62f723a61f7d96ff457aa0980a50806a54ca340c35868c536f767e6cd25af16e" prot="public">
          <name>VIJKA</name>
          <initializer>= 101</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structatrip_1_1Slice_1ab62f723a61f7d96ff457aa0980a50806af35e8f182569229bb6eecffa58eba1eb" prot="public">
          <name>VABCI</name>
          <initializer>= 200</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structatrip_1_1Slice_1ab62f723a61f7d96ff457aa0980a50806a80b26620da8680b6e19501a07fbfc2cf" prot="public">
          <name>TABIJ</name>
          <initializer>= 201</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structatrip_1_1Slice_1ab62f723a61f7d96ff457aa0980a50806a7f84e9e4065b546c2a6793e1eca6f0cf" prot="public">
          <name>VABIJ</name>
          <initializer>= 202</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Slice.hpp" line="104" column="1" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Slice.hpp" bodystart="105" bodyend="110"/>
      </memberdef>
      <memberdef kind="typedef" id="structatrip_1_1Slice_1a9ee6254fe98a83b507ca88ec92dd5227" prot="public" static="no">
        <type>std::pair&lt; <ref refid="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46" kindref="member">Type</ref>, <ref refid="namespaceatrip_1a8b97b58a2469967c1a6da53511879c7b" kindref="member">PartialTuple</ref> &gt;</type>
        <definition>using atrip::Slice&lt; F &gt;::Ty_x_Tu =  std::pair&lt; Type, PartialTuple &gt;</definition>
        <argsstring></argsstring>
        <name>Ty_x_Tu</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Slice.hpp" line="100" column="1" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Slice.hpp" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structatrip_1_1Slice_1a82088d08e7e28f88623fc0253bb0d730" prot="public" static="no">
        <type>std::vector&lt; <ref refid="structatrip_1_1Slice_1_1LocalDatabaseElement" kindref="compound">LocalDatabaseElement</ref> &gt;</type>
        <definition>using atrip::Slice&lt; F &gt;::LocalDatabase =  std::vector&lt;LocalDatabaseElement&gt;</definition>
        <argsstring></argsstring>
        <name>LocalDatabase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Slice.hpp" line="121" column="1" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Slice.hpp" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structatrip_1_1Slice_1a464f534f896f1b8e24fefbdbef28fa29" prot="public" static="no">
        <type><ref refid="structatrip_1_1Slice_1a82088d08e7e28f88623fc0253bb0d730" kindref="member">LocalDatabase</ref></type>
        <definition>using atrip::Slice&lt; F &gt;::Database =  LocalDatabase</definition>
        <argsstring></argsstring>
        <name>Database</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Slice.hpp" line="122" column="1" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Slice.hpp" bodystart="122" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structatrip_1_1Slice_1a5d20248fbeeed357af5abfa31c9f0d1b" prot="public" static="no" mutable="no">
        <type><ref refid="structatrip_1_1Slice_1_1Info" kindref="compound">Info</ref></type>
        <definition>Info atrip::Slice&lt; F &gt;::info</definition>
        <argsstring></argsstring>
        <name>info</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Slice.hpp" line="362" column="6" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Slice.hpp" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structatrip_1_1Slice_1ab0c99e8ec9e0c84611d7fdec14bdb6ee" prot="public" static="no" mutable="no">
        <type>F *</type>
        <definition>F* atrip::Slice&lt; F &gt;::data</definition>
        <argsstring></argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Slice.hpp" line="366" column="4" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Slice.hpp" bodystart="366" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structatrip_1_1Slice_1a0a10dbe08bdaca9682f640be8f8ae736" prot="public" static="no" mutable="no">
        <type>MPI_Request</type>
        <definition>MPI_Request atrip::Slice&lt; F &gt;::request</definition>
        <argsstring></argsstring>
        <name>request</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Slice.hpp" line="370" column="13" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Slice.hpp" bodystart="370" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structatrip_1_1Slice_1a7e16150ff4f60689556a1b9ca139a22d" prot="public" static="no" mutable="no">
        <type>const size_t</type>
        <definition>const size_t atrip::Slice&lt; F &gt;::size</definition>
        <argsstring></argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Slice.hpp" line="374" column="14" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Slice.hpp" bodystart="374" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structatrip_1_1Slice_1a07166aae255c90bcbb117bf1e8e2fb56" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceatrip_1a8b97b58a2469967c1a6da53511879c7b" kindref="member">PartialTuple</ref></type>
        <definition>static PartialTuple atrip::Slice&lt; F &gt;::subtupleBySlice</definition>
        <argsstring>(ABCTuple abc, Type sliceType)</argsstring>
        <name>subtupleBySlice</name>
        <param>
          <type><ref refid="namespaceatrip_1a28915c100861c4b2a8c868a4b8f1f233" kindref="member">ABCTuple</ref></type>
          <declname>abc</declname>
        </param>
        <param>
          <type><ref refid="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46" kindref="member">Type</ref></type>
          <declname>sliceType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Slice.hpp" line="233" column="14" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Slice.hpp" bodystart="233" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="structatrip_1_1Slice_1a74c8f856bc2b0aceca27849900fd8a2f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; <ref refid="structatrip_1_1Slice" kindref="compound">Slice</ref>&lt; F &gt; * &gt;</type>
        <definition>static std::vector&lt;Slice&lt;F&gt;*&gt; atrip::Slice&lt; F &gt;::hasRecycledReferencingToIt</definition>
        <argsstring>(std::vector&lt; Slice&lt; F &gt;&gt; &amp;slices, Info const &amp;info)</argsstring>
        <name>hasRecycledReferencingToIt</name>
        <param>
          <type>std::vector&lt; <ref refid="structatrip_1_1Slice" kindref="compound">Slice</ref>&lt; F &gt;&gt; &amp;</type>
          <declname>slices</declname>
        </param>
        <param>
          <type><ref refid="structatrip_1_1Slice_1_1Info" kindref="compound">Info</ref> const &amp;</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Slice.hpp" line="250" column="20" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Slice.hpp" bodystart="251" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="structatrip_1_1Slice_1a237680f772d527a25bbeeff619454230" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structatrip_1_1Slice" kindref="compound">Slice</ref>&lt; F &gt; &amp;</type>
        <definition>static Slice&lt;F&gt;&amp; atrip::Slice&lt; F &gt;::findOneByType</definition>
        <argsstring>(std::vector&lt; Slice&lt; F &gt;&gt; &amp;slices, Slice&lt; F &gt;::Type type)</argsstring>
        <name>findOneByType</name>
        <param>
          <type>std::vector&lt; <ref refid="structatrip_1_1Slice" kindref="compound">Slice</ref>&lt; F &gt;&gt; &amp;</type>
          <declname>slices</declname>
        </param>
        <param>
          <type><ref refid="structatrip_1_1Slice" kindref="compound">Slice</ref>&lt; F &gt;::<ref refid="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46" kindref="member">Type</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Slice.hpp" line="267" column="14" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Slice.hpp" bodystart="267" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="structatrip_1_1Slice_1accba377efd6a4cde3da7c421d0360a1b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structatrip_1_1Slice" kindref="compound">Slice</ref>&lt; F &gt; &amp;</type>
        <definition>static Slice&lt;F&gt;&amp; atrip::Slice&lt; F &gt;::findRecycledSource</definition>
        <argsstring>(std::vector&lt; Slice&lt; F &gt;&gt; &amp;slices, Slice&lt; F &gt;::Info info)</argsstring>
        <name>findRecycledSource</name>
        <param>
          <type>std::vector&lt; <ref refid="structatrip_1_1Slice" kindref="compound">Slice</ref>&lt; F &gt;&gt; &amp;</type>
          <declname>slices</declname>
        </param>
        <param>
          <type><ref refid="structatrip_1_1Slice" kindref="compound">Slice</ref>&lt; F &gt;::<ref refid="structatrip_1_1Slice_1_1Info" kindref="compound">Info</ref></type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Slice.hpp" line="284" column="1" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Slice.hpp" bodystart="284" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="structatrip_1_1Slice_1a560e50548083cc86b2ed7381ed35fd98" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structatrip_1_1Slice" kindref="compound">Slice</ref>&lt; F &gt; &amp;</type>
        <definition>static Slice&lt;F&gt;&amp; atrip::Slice&lt; F &gt;::findByTypeAbc</definition>
        <argsstring>(std::vector&lt; Slice&lt; F &gt;&gt; &amp;slices, Slice&lt; F &gt;::Type type, ABCTuple const &amp;abc)</argsstring>
        <name>findByTypeAbc</name>
        <param>
          <type>std::vector&lt; <ref refid="structatrip_1_1Slice" kindref="compound">Slice</ref>&lt; F &gt;&gt; &amp;</type>
          <declname>slices</declname>
        </param>
        <param>
          <type><ref refid="structatrip_1_1Slice" kindref="compound">Slice</ref>&lt; F &gt;::<ref refid="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46" kindref="member">Type</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="namespaceatrip_1a28915c100861c4b2a8c868a4b8f1f233" kindref="member">ABCTuple</ref> const &amp;</type>
          <declname>abc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Slice.hpp" line="309" column="14" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Slice.hpp" bodystart="310" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="structatrip_1_1Slice_1ac07ca1e076a9efb3fe6ed5a88409c3c5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structatrip_1_1Slice" kindref="compound">Slice</ref>&lt; F &gt; &amp;</type>
        <definition>static Slice&lt;F&gt;&amp; atrip::Slice&lt; F &gt;::findByInfo</definition>
        <argsstring>(std::vector&lt; Slice&lt; F &gt;&gt; &amp;slices, Slice&lt; F &gt;::Info const &amp;info)</argsstring>
        <name>findByInfo</name>
        <param>
          <type>std::vector&lt; <ref refid="structatrip_1_1Slice" kindref="compound">Slice</ref>&lt; F &gt;&gt; &amp;</type>
          <declname>slices</declname>
        </param>
        <param>
          <type><ref refid="structatrip_1_1Slice" kindref="compound">Slice</ref>&lt; F &gt;::<ref refid="structatrip_1_1Slice_1_1Info" kindref="compound">Info</ref> const &amp;</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Slice.hpp" line="339" column="14" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Slice.hpp" bodystart="339" bodyend="358"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structatrip_1_1Slice_1aea2369215b927bc117bbad21e4aa2b35" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void atrip::Slice&lt; F &gt;::markReady</definition>
        <argsstring>() noexcept</argsstring>
        <name>markReady</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Slice.hpp" line="378" column="6" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Slice.hpp" bodystart="378" bodyend="381"/>
      </memberdef>
      <memberdef kind="function" id="structatrip_1_1Slice_1ac87980ccdf02128fee5a3529e32ce346" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool atrip::Slice&lt; F &gt;::isUnwrapped</definition>
        <argsstring>() const noexcept</argsstring>
        <name>isUnwrapped</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Slice.hpp" line="385" column="6" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Slice.hpp" bodystart="385" bodyend="389"/>
      </memberdef>
      <memberdef kind="function" id="structatrip_1_1Slice_1a47d5e4787f2a9f5122ee7efc27b2565d" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool atrip::Slice&lt; F &gt;::isUnwrappable</definition>
        <argsstring>() const noexcept</argsstring>
        <name>isUnwrappable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Slice.hpp" line="393" column="6" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Slice.hpp" bodystart="393" bodyend="398"/>
      </memberdef>
      <memberdef kind="function" id="structatrip_1_1Slice_1adb64c4e0ccabba3313fdd82ac384ff12" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool atrip::Slice&lt; F &gt;::isDirectlyFetchable</definition>
        <argsstring>() const noexcept</argsstring>
        <name>isDirectlyFetchable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Slice.hpp" line="400" column="13" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Slice.hpp" bodystart="400" bodyend="402"/>
      </memberdef>
      <memberdef kind="function" id="structatrip_1_1Slice_1a44cca23ee01b498d8b9b725555f31481" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void atrip::Slice&lt; F &gt;::free</definition>
        <argsstring>() noexcept</argsstring>
        <name>free</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Slice.hpp" line="404" column="6" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Slice.hpp" bodystart="404" bodyend="411"/>
      </memberdef>
      <memberdef kind="function" id="structatrip_1_1Slice_1a0d405ac787aa47dc3ccb457ffaa6c839" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool atrip::Slice&lt; F &gt;::isFree</definition>
        <argsstring>() const noexcept</argsstring>
        <name>isFree</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Slice.hpp" line="413" column="13" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Slice.hpp" bodystart="413" bodyend="422"/>
      </memberdef>
      <memberdef kind="function" id="structatrip_1_1Slice_1acf78d7a1f3cdf125c05ff5007c52232f" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool atrip::Slice&lt; F &gt;::isRecyclable</definition>
        <argsstring>() const noexcept</argsstring>
        <name>isRecyclable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Slice.hpp" line="426" column="13" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Slice.hpp" bodystart="426" bodyend="433"/>
      </memberdef>
      <memberdef kind="function" id="structatrip_1_1Slice_1ae9851d6c9cbae126484ad37b2446408c" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool atrip::Slice&lt; F &gt;::hasValidDataPointer</definition>
        <argsstring>() const noexcept</argsstring>
        <name>hasValidDataPointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Slice.hpp" line="437" column="13" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Slice.hpp" bodystart="437" bodyend="442"/>
      </memberdef>
      <memberdef kind="function" id="structatrip_1_1Slice_1ad9e60cbb9fe27fdd22edaf94dd46fa5e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void atrip::Slice&lt; F &gt;::unwrapAndMarkReady</definition>
        <argsstring>()</argsstring>
        <name>unwrapAndMarkReady</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Slice.hpp" line="446" column="6" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Slice.hpp" bodystart="446" bodyend="474"/>
      </memberdef>
      <memberdef kind="function" id="structatrip_1_1Slice_1a00a827ca8fcc5c1caa383b2798e10e5c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>atrip::Slice&lt; F &gt;::Slice</definition>
        <argsstring>(size_t size_)</argsstring>
        <name>Slice</name>
        <param>
          <type>size_t</type>
          <declname>size_</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/atrip/atrip/include/atrip/Slice.hpp" line="478" column="1" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Slice.hpp" bodystart="478" bodyend="482"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>atrip::Slice&lt; F &gt;</label>
        <link refid="structatrip_1_1Slice"/>
        <childnode refid="2" relation="usage">
          <edgelabel>info</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>atrip::Slice&lt; F &gt;::Info</label>
        <link refid="structatrip_1_1Slice_1_1Info"/>
        <childnode refid="3" relation="usage">
          <edgelabel>from</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>atrip::Slice&lt; F &gt;::Location</label>
        <link refid="structatrip_1_1Slice_1_1Location"/>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/atrip/atrip/include/atrip/Slice.hpp" line="43" column="1" bodyfile="/home/runner/work/atrip/atrip/include/atrip/Slice.hpp" bodystart="43" bodyend="485"/>
    <listofallmembers>
      <member refid="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46ac37202de596dc7eb8a95a68a168750ba" prot="public" virt="non-virtual"><scope>atrip::Slice</scope><name>A</name></member>
      <member refid="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46a95d8dd6c535cdf180d9b78fea1dabd2c" prot="public" virt="non-virtual"><scope>atrip::Slice</scope><name>AB</name></member>
      <member refid="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46aed801e2742ba2af5a55804d6e0e7613e" prot="public" virt="non-virtual"><scope>atrip::Slice</scope><name>AC</name></member>
      <member refid="structatrip_1_1Slice_1ade9f7c874828268e1cc03d5da85734a0a37b0da7cf0ebee6184b29c2c212574e7" prot="public" virt="non-virtual"><scope>atrip::Slice</scope><name>Acceptor</name></member>
      <member refid="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46ab0cc4fdf016372ae51b4b33f19970877" prot="public" virt="non-virtual"><scope>atrip::Slice</scope><name>B</name></member>
      <member refid="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46a95b07e2180c2f7003f986104dfb85677" prot="public" virt="non-virtual"><scope>atrip::Slice</scope><name>BA</name></member>
      <member refid="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46a56b6bbbe684c42ebf26bb91d68921b42" prot="public" virt="non-virtual"><scope>atrip::Slice</scope><name>BC</name></member>
      <member refid="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46ac32b5c11df3f14116f3fddf2bc10a55e" prot="public" virt="non-virtual"><scope>atrip::Slice</scope><name>Blank</name></member>
      <member refid="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46a4d34dab093e3bc7dc5a6afa466dfc7a3" prot="public" virt="non-virtual"><scope>atrip::Slice</scope><name>C</name></member>
      <member refid="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46a5d98c0f033fde70dd1b2d48220a4726d" prot="public" virt="non-virtual"><scope>atrip::Slice</scope><name>CA</name></member>
      <member refid="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46a1781b62e2b19583ea840692812d17cea" prot="public" virt="non-virtual"><scope>atrip::Slice</scope><name>CB</name></member>
      <member refid="structatrip_1_1Slice_1ab0c99e8ec9e0c84611d7fdec14bdb6ee" prot="public" virt="non-virtual"><scope>atrip::Slice</scope><name>data</name></member>
      <member refid="structatrip_1_1Slice_1a464f534f896f1b8e24fefbdbef28fa29" prot="public" virt="non-virtual"><scope>atrip::Slice</scope><name>Database</name></member>
      <member refid="structatrip_1_1Slice_1ade9f7c874828268e1cc03d5da85734a0ae6d67fb1c5af3b568ab9ad22659ce152" prot="public" virt="non-virtual"><scope>atrip::Slice</scope><name>Dispatched</name></member>
      <member refid="structatrip_1_1Slice_1ade9f7c874828268e1cc03d5da85734a0a5651eced6ec56a1720f3e315c7fad891" prot="public" virt="non-virtual"><scope>atrip::Slice</scope><name>Fetch</name></member>
      <member refid="structatrip_1_1Slice_1ac07ca1e076a9efb3fe6ed5a88409c3c5" prot="public" virt="non-virtual"><scope>atrip::Slice</scope><name>findByInfo</name></member>
      <member refid="structatrip_1_1Slice_1a560e50548083cc86b2ed7381ed35fd98" prot="public" virt="non-virtual"><scope>atrip::Slice</scope><name>findByTypeAbc</name></member>
      <member refid="structatrip_1_1Slice_1a237680f772d527a25bbeeff619454230" prot="public" virt="non-virtual"><scope>atrip::Slice</scope><name>findOneByType</name></member>
      <member refid="structatrip_1_1Slice_1accba377efd6a4cde3da7c421d0360a1b" prot="public" virt="non-virtual"><scope>atrip::Slice</scope><name>findRecycledSource</name></member>
      <member refid="structatrip_1_1Slice_1a44cca23ee01b498d8b9b725555f31481" prot="public" virt="non-virtual"><scope>atrip::Slice</scope><name>free</name></member>
      <member refid="structatrip_1_1Slice_1a74c8f856bc2b0aceca27849900fd8a2f" prot="public" virt="non-virtual"><scope>atrip::Slice</scope><name>hasRecycledReferencingToIt</name></member>
      <member refid="structatrip_1_1Slice_1ae9851d6c9cbae126484ad37b2446408c" prot="public" virt="non-virtual"><scope>atrip::Slice</scope><name>hasValidDataPointer</name></member>
      <member refid="structatrip_1_1Slice_1a5d20248fbeeed357af5abfa31c9f0d1b" prot="public" virt="non-virtual"><scope>atrip::Slice</scope><name>info</name></member>
      <member refid="structatrip_1_1Slice_1adb64c4e0ccabba3313fdd82ac384ff12" prot="public" virt="non-virtual"><scope>atrip::Slice</scope><name>isDirectlyFetchable</name></member>
      <member refid="structatrip_1_1Slice_1a0d405ac787aa47dc3ccb457ffaa6c839" prot="public" virt="non-virtual"><scope>atrip::Slice</scope><name>isFree</name></member>
      <member refid="structatrip_1_1Slice_1acf78d7a1f3cdf125c05ff5007c52232f" prot="public" virt="non-virtual"><scope>atrip::Slice</scope><name>isRecyclable</name></member>
      <member refid="structatrip_1_1Slice_1a47d5e4787f2a9f5122ee7efc27b2565d" prot="public" virt="non-virtual"><scope>atrip::Slice</scope><name>isUnwrappable</name></member>
      <member refid="structatrip_1_1Slice_1ac87980ccdf02128fee5a3529e32ce346" prot="public" virt="non-virtual"><scope>atrip::Slice</scope><name>isUnwrapped</name></member>
      <member refid="structatrip_1_1Slice_1a82088d08e7e28f88623fc0253bb0d730" prot="public" virt="non-virtual"><scope>atrip::Slice</scope><name>LocalDatabase</name></member>
      <member refid="structatrip_1_1Slice_1aea2369215b927bc117bbad21e4aa2b35" prot="public" virt="non-virtual"><scope>atrip::Slice</scope><name>markReady</name></member>
      <member refid="structatrip_1_1Slice_1ab62f723a61f7d96ff457aa0980a50806" prot="public" virt="non-virtual"><scope>atrip::Slice</scope><name>Name</name></member>
      <member refid="structatrip_1_1Slice_1ade9f7c874828268e1cc03d5da85734a0a08aec9b7b59e8a3ee12a965bf4d7afd9" prot="public" virt="non-virtual"><scope>atrip::Slice</scope><name>Ready</name></member>
      <member refid="structatrip_1_1Slice_1ade9f7c874828268e1cc03d5da85734a0af916232db704e602917e8b38720e5863" prot="public" virt="non-virtual"><scope>atrip::Slice</scope><name>Recycled</name></member>
      <member refid="structatrip_1_1Slice_1a0a10dbe08bdaca9682f640be8f8ae736" prot="public" virt="non-virtual"><scope>atrip::Slice</scope><name>request</name></member>
      <member refid="structatrip_1_1Slice_1ade9f7c874828268e1cc03d5da85734a0a57a108e7e6561000ac9f7d9e9b9317b9" prot="public" virt="non-virtual"><scope>atrip::Slice</scope><name>SelfSufficient</name></member>
      <member refid="structatrip_1_1Slice_1a7e16150ff4f60689556a1b9ca139a22d" prot="public" virt="non-virtual"><scope>atrip::Slice</scope><name>size</name></member>
      <member refid="structatrip_1_1Slice_1a00a827ca8fcc5c1caa383b2798e10e5c" prot="public" virt="non-virtual"><scope>atrip::Slice</scope><name>Slice</name></member>
      <member refid="structatrip_1_1Slice_1ade9f7c874828268e1cc03d5da85734a0" prot="public" virt="non-virtual"><scope>atrip::Slice</scope><name>State</name></member>
      <member refid="structatrip_1_1Slice_1a07166aae255c90bcbb117bf1e8e2fb56" prot="public" virt="non-virtual"><scope>atrip::Slice</scope><name>subtupleBySlice</name></member>
      <member refid="structatrip_1_1Slice_1ab62f723a61f7d96ff457aa0980a50806a7eaa6927fdb18899e6a074efb86e8ff0" prot="public" virt="non-virtual"><scope>atrip::Slice</scope><name>TA</name></member>
      <member refid="structatrip_1_1Slice_1ab62f723a61f7d96ff457aa0980a50806a80b26620da8680b6e19501a07fbfc2cf" prot="public" virt="non-virtual"><scope>atrip::Slice</scope><name>TABIJ</name></member>
      <member refid="structatrip_1_1Slice_1a9ee6254fe98a83b507ca88ec92dd5227" prot="public" virt="non-virtual"><scope>atrip::Slice</scope><name>Ty_x_Tu</name></member>
      <member refid="structatrip_1_1Slice_1a4932aa32235b09b0a8220fc9ec3f3e46" prot="public" virt="non-virtual"><scope>atrip::Slice</scope><name>Type</name></member>
      <member refid="structatrip_1_1Slice_1ad9e60cbb9fe27fdd22edaf94dd46fa5e" prot="public" virt="non-virtual"><scope>atrip::Slice</scope><name>unwrapAndMarkReady</name></member>
      <member refid="structatrip_1_1Slice_1ab62f723a61f7d96ff457aa0980a50806af35e8f182569229bb6eecffa58eba1eb" prot="public" virt="non-virtual"><scope>atrip::Slice</scope><name>VABCI</name></member>
      <member refid="structatrip_1_1Slice_1ab62f723a61f7d96ff457aa0980a50806a7f84e9e4065b546c2a6793e1eca6f0cf" prot="public" virt="non-virtual"><scope>atrip::Slice</scope><name>VABIJ</name></member>
      <member refid="structatrip_1_1Slice_1ab62f723a61f7d96ff457aa0980a50806a54ca340c35868c536f767e6cd25af16e" prot="public" virt="non-virtual"><scope>atrip::Slice</scope><name>VIJKA</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
